{"version":3,"sources":["shared/modules/routing/decorator/router.decorator.ts","shared/abstract/model.abstract.ts","shared/helper/validator.helper.ts","shared/model/api/api-list-request.model.ts","shared/modules/api/builder/api-client.builder.ts","shared/model/general/pagination.model.ts","shared/model/general/constant/pagination.const.ts","shared/model/movie/movie-list.model.ts","shared/model/movie/movie-list-item.model.ts","shared/model/movie/helper/movie-list-item-translator.helper.ts","shared/helper/string.helper.ts","shared/model/general/helper/pagination-translator.helper.ts","shared/model/movie/helper/movie-list-translator.helper.ts","shared/model/general/score.model.ts","shared/model/general/rating.model.ts","shared/model/movie/movie-figure.model.ts","shared/model/movie/movie-detail.model.ts","shared/model/movie/helper/movie-figure-translator.helper.ts","shared/model/general/helper/score-translator.helper.ts","shared/model/general/rating-item.model.ts","shared/model/general/helper/rating-item-translator.helper.ts","shared/model/general/helper/rating-translator.helper.ts","shared/model/movie/helper/movie-detail-translator.helper.ts","shared/repository/rest/index.ts","shared/repository/rest/implementation/movie/index.ts","env/env.config.ts","content/movie/movie-list/movie-list.page.tsx","content/movie/movie-detail/movie-detail.page.tsx","content/movie/movie.router.tsx","App.tsx","shared/modules/routing/abstract/routing-app.abstract.tsx","serviceWorker.ts","index.tsx"],"names":["pathModules","ModelAbstract","ValidatorHelper","param","undefined","filter","item","length","verifiedIsNotEmpty","verifiedIsNotNull","APIListRequestModel","query","page","this","s","Error","APIClientBuilder","apiKey","apiURI","funcTranslator","func","apikey","bulkVerifiedIsNotEmpty","fetchAPI","modelValue","then","url","params","Axios","get","data","status","PaginationModel","perPage","totalPage","totalResult","MovieListModel","pagination","itemList","map","MovieListItemModel","title","year","id","type","poster","MovieListItemTranslatorHelper","Poster","Title","Type","Year","imdbID","setId","setPoster","setTitle","setType","setYear","StringHelper","number","test","parseInt","PaginationTranslatorHelper","totalResults","result","validateNumberAndParsedToInteger","Math","ceil","setPage","setPerPage","setTotalPage","setTotalResult","translateRESTToMovieListItem","translateRESTToPagination","MovieListTranslatorHelper","Response","res","Search","setItem","setPagination","ScoreModel","metaScore","imdbRating","imdbVotes","RatingModel","value","MovieFigureModel","director","writter","actors","MovieDetailModel","plot","rated","genre","runtime","released","production","score","ratings","figure","MovieFigureTranslatorHelper","Director","Writer","Actors","setDirector","setWritter","setActors","ScoreTranslatorHelper","Metascore","setMetaScore","setImdbRating","setImdbVotes","RatingItemModel","source","RatingItemTranslatorHelper","Source","Value","setSource","setValue","RatingTranslatorHelper","Ratings","translateRESTToRatingItem","MovieDetailTranslatorHelper","Plot","Rated","Genre","Runtime","Released","Production","setPlot","setRated","setGenre","setRuntime","setReleased","setProduction","setScore","translateRESTToScore","setRatings","translateRESTToRating","setFigure","RepositoryRestAPIService","MovieRepository","getListMovie","bind","getDetailMovie","setApiKey","setApiURI","setParam","setFuncTranslator","translateRESTToMovieList","execute","translateRESTToMovieDetail","MovieRepositoryImplementation","singleton","MovieListPage","useEffect","setQuerySearch","console","debug","className","MovieDetailPage","RoutingSubModulesDecorator","pathSubModules","target","methodName","routes","Reflect","getMetadata","constructor","path","defineMetadata","PokemonRouter","hasMetadata","PokemonDetailPage","PokemonListPage","App","MovieRouter","RoutingAppAbstract","generateRouting","modules","ModulesItem","controllerPath","Modules","key","render","generateRoutingItem","modulesPath","Component","exact","PureComponent","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b2d6cec.chunk.js","sourcesContent":["import 'reflect-metadata';\nimport { RoutingItemInterface } from '../interface/routing-item.interface';\n\n/**\n * Routing Modules\n * @param {string} pathModules - path modules\n * @returns {MethodDecorator}\n */\nexport const RoutingModulesDecorator = (\n    pathModules: string\n): ClassDecorator => (target: Object): void => {\n    Reflect.defineMetadata('modules', pathModules, target);\n\n    if (!Reflect.hasMetadata('submodules', target)) {\n        Reflect.defineMetadata('submodules', [], target);\n    }\n};\n\n/**\n * Routing Sub Modules\n * @param {string} pathSubModules - path sub modules\n * @returns {MethodDecorator}\n */\nexport const RoutingSubModulesDecorator = (\n    pathSubModules: string\n): MethodDecorator => (\n    target: Object,\n    methodName: string | symbol\n): void => {\n    const routes: RoutingItemInterface[] = [\n        ...(Reflect.getMetadata(\n            'submodules',\n            target.constructor\n        ) || []),\n        {\n            methodName,\n            path: pathSubModules\n        }\n    ];\n\n    Reflect.defineMetadata(\n        'submodules',\n        routes,\n        target.constructor\n    );\n};\n","/**\n * Model Abstract\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nabstract class ModelAbstract<T> {\n    abstract get modelValue(): T | undefined;\n}\n\nexport default ModelAbstract;\n","/**\n * Validator Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ValidatorHelper {\n    /**\n     * Verified Is Not Empty\n     * @param {unknown} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static verifiedIsNotEmpty(param: unknown): boolean {\n        return (\n            [undefined, null, ''].filter(\n                (item: unknown) => param === item\n            ).length === 0\n        );\n    }\n\n    /**\n     * Verified Is Not Null\n     * @param {unknown} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static verifiedIsNotNull(param: unknown): boolean {\n        return (\n            [undefined, null].filter(\n                (item: unknown) => param === item\n            ).length === 0\n        );\n    }\n\n    /**\n     * Bulk Verified Is Not Empty\n     * @param {unknown[]} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static bulkVerifiedIsNotEmpty(\n        param: unknown[]\n    ): boolean {\n        return (\n            param.filter(\n                (item) =>\n                    !ValidatorHelper.verifiedIsNotEmpty(\n                        item\n                    )\n            ).length === 0\n        );\n    }\n\n    /**\n     * Bulk Verified Is Not Null\n     * @param {unknown[]} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static bulkVerifiedIsNotNull(\n        param: unknown[]\n    ): boolean {\n        return (\n            param.filter(\n                (item) =>\n                    !ValidatorHelper.verifiedIsNotNull(item)\n            ).length === 0\n        );\n    }\n}\n\nexport default ValidatorHelper;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { APIListRequestInterface } from './interface/model.interface';\n\n/**\n * API List Request Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass APIListRequestModel extends ModelAbstract<\n    APIListRequestInterface\n> {\n    private query: string = '';\n\n    private page: number = 1;\n\n    /**\n     * Setter ID\n     * @param {string} query - query search movies\n     * @return {this}\n     */\n    public setQuerySearch(query: string): this {\n        this.query = query;\n        return this;\n    }\n\n    /**\n     * Setter Page\n     * @param {string} page - page number\n     * @return {this}\n     */\n    public setPage(page: number): this {\n        this.page = page;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {APIListRequestInterface}\n     */\n    public get modelValue(): APIListRequestInterface {\n        const { query: s, page } = this;\n\n        if (ValidatorHelper.verifiedIsNotEmpty(s)) {\n            return {\n                s,\n                page\n            };\n        }\n\n        throw Error('Set Query Search Not Invoked');\n    }\n}\n\nexport default APIListRequestModel;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Axios from 'axios';\n\nimport ModelAbstract from '../../../abstract/model.abstract';\nimport ValidatorHelper from '../../../helper/validator.helper';\n\ntype TranslatorFuncType<T, R> = (\n    param: T\n) => ModelAbstract<R>;\n\n/**\n * API Client Builder\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass APIClientBuilder<T = any, P = any, R = any> {\n    private apiKey: string = '';\n\n    private apiURI: string = '';\n\n    private param: ModelAbstract<P> | undefined;\n\n    private funcTranslator:\n        | TranslatorFuncType<T, R>\n        | undefined;\n\n    /**\n     * Set API Key\n     * @param {string} apiKey - api key\n     * @returns {this}\n     */\n    public setApiKey(apiKey: string): this {\n        this.apiKey = apiKey;\n        return this;\n    }\n\n    /**\n     * Set API URI\n     * @param {ModelAbstract<P>} param - parameter model\n     * @returns {this}\n     */\n    public setParam(param: ModelAbstract<P>): this {\n        this.param = param;\n        return this;\n    }\n\n    /**\n     * Set Param\n     * @param {string} apiURI - api uri\n     * @returns {this}\n     */\n    public setApiURI(apiURI: string): this {\n        this.apiURI = apiURI;\n        return this;\n    }\n\n    /**\n     * Set Func Translatr\n     * @param {string} apiURI - api uri\n     * @returns {this}\n     */\n    public setFuncTranslator(\n        func: TranslatorFuncType<T, R>\n    ): this {\n        this.funcTranslator = func;\n        return this;\n    }\n\n    /**\n     * Execute Builder\n     * @return {Promise<R | undefined>}\n     */\n    public execute(): Promise<R | undefined> {\n        const {\n            apiKey: apikey,\n            apiURI,\n            param,\n            funcTranslator\n        } = this;\n\n        if (\n            funcTranslator &&\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                apikey,\n                apiURI,\n                param\n            ])\n        ) {\n            return APIClientBuilder.fetchAPI<T>(\n                `${apiURI}`,\n                {\n                    apikey,\n                    ...(param as ModelAbstract<P>)\n                        .modelValue\n                }\n            )\n                .then(funcTranslator)\n                .then(({ modelValue }) => modelValue);\n        }\n\n        throw Error(\n            'API Key, API URL and Func Translator Must Be Defined'\n        );\n    }\n\n    /**\n     * Fetch API\n     * @description\n     */\n    private static fetchAPI<Type>(\n        url: string,\n        params: Record<string, any>\n    ): Promise<Type> {\n        return Axios.get<Type>(`${url}`, {\n            params\n        }).then(({ data, status }) => {\n            if (status === 200) {\n                return data;\n            }\n\n            throw new Error('Response Status 500');\n        });\n    }\n}\n\nexport default APIClientBuilder;\n","import { PER_PAGE } from './constant/pagination.const';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport { PaginationInterface } from './interface/model.interface';\n\n/**\n * Pagination Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass PaginationModel extends ModelAbstract<\n    PaginationInterface\n> {\n    private page: number = 1;\n\n    private perPage: number = PER_PAGE;\n\n    private totalPage: number = 0;\n\n    private totalResult: number = 0;\n\n    /**\n     * Set page\n     * @param {number} page - page value\n     */\n    public setPage(page: number): this {\n        this.page = page;\n        return this;\n    }\n\n    /**\n     * Set perPage\n     * @param {number} perPage - perPage value\n     */\n    public setPerPage(perPage: number): this {\n        this.perPage = perPage;\n        return this;\n    }\n\n    /**\n     * Set totalPage\n     * @param {number} totalPage - totalPage value\n     */\n    public setTotalPage(totalPage: number): this {\n        this.totalPage = totalPage;\n        return this;\n    }\n\n    /**\n     * Set totalResult\n     * @param {number} totalResult - totalResult value\n     */\n    public setTotalResult(totalResult: number): this {\n        this.totalResult = totalResult;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {PaginationInterface}\n     */\n    public get modelValue(): PaginationInterface {\n        const {\n            page,\n            perPage,\n            totalPage,\n            totalResult\n        } = this;\n\n        return {\n            page,\n            perPage,\n            totalPage,\n            totalResult\n        };\n    }\n}\n\nexport default PaginationModel;\n","import { PaginationInterface } from '../interface/model.interface';\n\nexport const PER_PAGE = 10;\n\nexport const DEFAULT_PAGINATION: PaginationInterface = {\n    page: 1,\n    perPage: 10,\n    totalPage: 0,\n    totalResult: 0\n};\n","import MovieListItemModel from './movie-list-item.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport PaginationModel from '../general/pagination.model';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieListInterface } from './interface/model.interface';\n\n/**\n * Movie List Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListModel extends ModelAbstract<\n    MovieListInterface\n> {\n    private item: MovieListItemModel[] = [];\n\n    private pagination: PaginationModel = new PaginationModel();\n\n    /**\n     * Setter Item\n     * @param {MovieListItemModel[]} item - movie list item\n     * @return {this}\n     */\n    public setItem(item: MovieListItemModel[]): this {\n        this.item = item;\n        return this;\n    }\n\n    /**\n     * Setter Pagination\n     * @param {PaginationModel} pagination - pagination model\n     * @return {this}\n     */\n    public setPagination(\n        pagination: PaginationModel\n    ): this {\n        this.pagination = pagination;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {MovieListInterface}\n     */\n    public get modelValue(): MovieListInterface {\n        const { item: itemList, pagination } = this;\n        const formattedItem = itemList.filter(\n            ValidatorHelper.verifiedIsNotEmpty\n        );\n\n        return {\n            item: formattedItem.map(\n                ({ modelValue }) => modelValue\n            ),\n            pagination: pagination.modelValue\n        };\n    }\n}\n\nexport default MovieListModel;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieType } from '../../interface/movie-type.interface';\nimport { MovieListItemInterface } from './interface/model.interface';\n\n/**\n * Movie List Item Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListItemModel extends ModelAbstract<\n    MovieListItemInterface\n> {\n    private title: string = '';\n\n    private year: string = '';\n\n    private id: string = '';\n\n    private type: MovieType = 'movie';\n\n    private poster: string = '';\n\n    /**\n     * Set title\n     * @param {string} title - title value\n     * @returns {this}\n     */\n    public setTitle(title: string): this {\n        this.title = title;\n        return this;\n    }\n\n    /**\n     * Set year\n     * @param {string} year - year value\n     * @returns {this}\n     */\n    public setYear(year: string): this {\n        this.year = year;\n        return this;\n    }\n\n    /**\n     * Set id\n     * @param {string} id - id value\n     * @returns {this}\n     */\n    public setId(id: string): this {\n        this.id = id;\n        return this;\n    }\n\n    /**\n     * Set type\n     * @param {MovieType} type - type value\n     * @returns {this}\n     */\n    public setType(type: MovieType): this {\n        this.type = type;\n        return this;\n    }\n\n    /**\n     * Set poster\n     * @param {string} poster - poster value\n     * @returns {this}\n     */\n    public setPoster(poster: string): this {\n        this.poster = poster;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): MovieListItemInterface {\n        const { title, year, id, type, poster } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                title,\n                year,\n                id,\n                poster\n            ])\n        ) {\n            return {\n                title,\n                year,\n                id,\n                type,\n                poster\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieListItemModel;\n","import MovieListItemModel from '../movie-list-item.model';\nimport { Search } from '../../../generated/api/list-api.interface';\nimport { MovieType } from '../../../interface/movie-type.interface';\n\n/**\n * Movie List Item Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListItemTranslatorHelper {\n    /**\n     * Translate Rest To Movie List Item\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieListItem({\n        Poster,\n        Title,\n        Type,\n        Year,\n        imdbID\n    }: Search): MovieListItemModel {\n        return new MovieListItemModel()\n            .setId(imdbID)\n            .setPoster(Poster)\n            .setTitle(Title)\n            .setType(Type as MovieType)\n            .setYear(Year);\n    }\n}\n\nexport default MovieListItemTranslatorHelper;\n","/**\n * String Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass StringHelper {\n    /**\n     * Validate Number And Parsed To Integer\n     * @param {unknow} number - parameter for parsing this method\n     * @return {number}\n     */\n    static validateNumberAndParsedToInteger(\n        number: unknown\n    ): number {\n        if (\n            typeof number === 'number' ||\n            typeof number === 'bigint' ||\n            /^-?\\d*(\\.\\d+)?$/.test(`${number}`)\n        ) {\n            return parseInt(`${number}`, 10);\n        }\n\n        return 0;\n    }\n}\n\nexport default StringHelper;\n","import PaginationModel from '../pagination.model';\nimport StringHelper from '../../../helper/string.helper';\nimport { RootObjectListAPIResponse } from '../../../generated/api/list-api.interface';\n\n/**\n * Pagination Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass PaginationTranslatorHelper {\n    /**\n     * Translate Rest To Rating Item\n     * @param {number} page - page number\n     * @param {number} perPage - per page option\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToPagination(\n        page: number,\n        perPage: number,\n        {\n            totalResults\n        }: Pick<RootObjectListAPIResponse, 'totalResults'>\n    ): PaginationModel {\n        const result = StringHelper.validateNumberAndParsedToInteger(\n            totalResults\n        );\n        const totalPage = Math.ceil(result / perPage);\n        return new PaginationModel()\n            .setPage(page)\n            .setPerPage(perPage)\n            .setTotalPage(totalPage)\n            .setTotalResult(result);\n    }\n}\n\nexport default PaginationTranslatorHelper;\n","import MovieListModel from '../movie-list.model';\nimport MovieListItemTranslatorHelper from './movie-list-item-translator.helper';\nimport { RootObjectListAPIResponse } from '../../../generated/api/list-api.interface';\nimport PaginationTranslatorHelper from '../../general/helper/pagination-translator.helper';\nimport { RootObjectAPIErrorResponse } from '../../../generated/api/error-api.interface';\nimport { PER_PAGE } from '../../general/constant/pagination.const';\n\nconst {\n    translateRESTToMovieListItem\n} = MovieListItemTranslatorHelper;\nconst {\n    translateRESTToPagination\n} = PaginationTranslatorHelper;\n\n/**\n * Movie List Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListTranslatorHelper {\n    /**\n     * Translate Rest To Movie List\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieList({\n        Response,\n        ...res\n    }:\n        | RootObjectAPIErrorResponse\n        | RootObjectListAPIResponse): MovieListModel {\n        if (Response === 'True') {\n            const { Search, totalResults } = res as Omit<\n                RootObjectListAPIResponse,\n                'Response'\n            >;\n\n            return new MovieListModel()\n                .setItem(\n                    Search.map(translateRESTToMovieListItem)\n                )\n                .setPagination(\n                    translateRESTToPagination(1, PER_PAGE, {\n                        totalResults\n                    })\n                );\n        }\n\n        throw new Error('API Error');\n    }\n}\n\nexport default MovieListTranslatorHelper;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { ScoreInterface } from './interface/model.interface';\n\n/**\n * Score Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ScoreModel extends ModelAbstract<ScoreInterface> {\n    private metaScore: string = '';\n\n    private imdbRating: string = '';\n\n    private imdbVotes: string = '';\n\n    /**\n     * Set metaScore\n     * @param {string} metaScore: metaScore value\n     * @return {this}\n     */\n    public setMetaScore(metaScore: string): this {\n        this.metaScore = metaScore;\n        return this;\n    }\n\n    /**\n     * Set imdbRating\n     * @param {string} imdbRating: imdbRating value\n     * @return {this}\n     */\n    public setImdbRating(imdbRating: string): this {\n        this.imdbRating = imdbRating;\n        return this;\n    }\n\n    /**\n     * Set imdbVotes\n     * @param {string} imdbVotes: imdbVotes value\n     * @return {this}\n     */\n    public setImdbVotes(imdbVotes: string): this {\n        this.imdbVotes = imdbVotes;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): ScoreInterface {\n        const { imdbRating, metaScore, imdbVotes } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                imdbRating,\n                metaScore,\n                imdbVotes\n            ])\n        ) {\n            return {\n                imdbRating,\n                metaScore,\n                imdbVotes\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default ScoreModel;\n","import RatingItemModel from './rating-item.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { RatingInterface } from './interface/model.interface';\n\n/**\n * Rating Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingModel extends ModelAbstract<RatingInterface> {\n    private item: RatingItemModel[] = [];\n\n    private value: string = '';\n\n    /**\n     * Setter Item\n     * @param {RatingItemModel[]} item - item rating\n     * @return {this}\n     */\n    public setItem(item: RatingItemModel[]): this {\n        this.item = item;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {RatingInterface}\n     */\n    public get modelValue(): RatingInterface {\n        const { item: itemList } = this;\n        const formattedItem = itemList.filter(\n            ValidatorHelper.verifiedIsNotEmpty\n        );\n\n        return {\n            item: formattedItem.map(\n                ({ modelValue }) => modelValue\n            )\n        };\n    }\n}\n\nexport default RatingModel;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieFigureInterface } from './interface/model.interface';\n\n/**\n * Movie Figure Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieFigureModel extends ModelAbstract<\n    MovieFigureInterface\n> {\n    private director: string = '';\n\n    private writter: string = '';\n\n    private actors: string = '';\n\n    /**\n     * Set Director\n     * @param {string} director - director value\n     * @retrun {this}\n     */\n    public setDirector(director: string): this {\n        this.director = director;\n        return this;\n    }\n\n    /**\n     * Set Writter\n     * @param {string} writter - writter value\n     * @retrun {this}\n     */\n    public setWritter(writter: string): this {\n        this.writter = writter;\n        return this;\n    }\n\n    /**\n     * Set Actors\n     * @param {string} actors - actors value\n     * @retrun {this}\n     */\n    public setActors(actors: string): this {\n        this.actors = actors;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): MovieFigureInterface {\n        const { director, writter, actors } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                director,\n                writter,\n                actors\n            ])\n        ) {\n            return {\n                director,\n                writter,\n                actors\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieFigureModel;\n","import ScoreModel from '../general/score.model';\nimport RatingModel from '../general/rating.model';\nimport MovieFigureModel from './movie-figure.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieType } from '../../interface/movie-type.interface';\nimport { MovieDetailInterface } from './interface/model.interface';\n\n/**\n * Movie Detail Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieDetailModel extends ModelAbstract<\n    MovieDetailInterface\n> {\n    private title: string = '';\n\n    private year: string = '';\n\n    private id: string = '';\n\n    private type: MovieType = 'movie';\n\n    private plot: string = '';\n\n    private rated: string = '';\n\n    private genre: string = '';\n\n    private poster: string = '';\n\n    private runtime: string = '';\n\n    private released: string = '';\n\n    private production: string = '';\n\n    private score: ScoreModel = new ScoreModel();\n\n    private ratings: RatingModel = new RatingModel();\n\n    private figure: MovieFigureModel = new MovieFigureModel();\n\n    /**\n     * Set title\n     * @param {string} title - title value\n     * @returns {this}\n     */\n    public setTitle(title: string): this {\n        this.title = title;\n        return this;\n    }\n\n    /**\n     * Set year\n     * @param {string} year - year value\n     * @returns {this}\n     */\n    public setYear(year: string): this {\n        this.year = year;\n        return this;\n    }\n\n    /**\n     * Set id\n     * @param {string} id - id value\n     * @returns {this}\n     */\n    public setId(id: string): this {\n        this.id = id;\n        return this;\n    }\n\n    /**\n     * Set type\n     * @param {MovieType} type - type value\n     * @returns {this}\n     */\n    public setType(type: MovieType): this {\n        this.type = type;\n        return this;\n    }\n\n    /**\n     * Set plot\n     * @param {string} plot - plot value\n     * @return {this}\n     */\n    public setPlot(plot: string): this {\n        this.plot = plot;\n        return this;\n    }\n\n    /**\n     * Set rated\n     * @param {string} rated - rated value\n     * @return {this}\n     */\n    public setRated(rated: string): this {\n        this.rated = rated;\n        return this;\n    }\n\n    /**\n     * Set genre\n     * @param {string} genre - genre value\n     * @return {this}\n     */\n    public setGenre(genre: string): this {\n        this.genre = genre;\n        return this;\n    }\n\n    /**\n     * Set poster\n     * @param {string} poster - poster value\n     * @return {this}\n     */\n    public setPoster(poster: string): this {\n        this.poster = poster;\n        return this;\n    }\n\n    /**\n     * Set runtime\n     * @param {string} runtime - runtime value\n     * @return {this}\n     */\n    public setRuntime(runtime: string): this {\n        this.runtime = runtime;\n        return this;\n    }\n\n    /**\n     * Set released\n     * @param {string} released - released value\n     * @return {this}\n     */\n    public setReleased(released: string): this {\n        this.released = released;\n        return this;\n    }\n\n    /**\n     * Set production\n     * @param {string} production - production value\n     * @return {this}\n     */\n    public setProduction(production: string): this {\n        this.production = production;\n        return this;\n    }\n\n    /**\n     * Set score\n     * @param {ScoreModel} score - score value\n     * @return {this}\n     */\n    public setScore(score: ScoreModel): this {\n        this.score = score;\n        return this;\n    }\n\n    /**\n     * Set ratings\n     * @param {RatingModel} ratings - ratings value\n     * @return {this}\n     */\n    public setRatings(ratings: RatingModel): this {\n        this.ratings = ratings;\n        return this;\n    }\n\n    /**\n     * Set figure\n     * @param {MovieFigureModel} figure - figure value\n     * @return {this}\n     */\n    public setFigure(figure: MovieFigureModel): this {\n        this.figure = figure;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {MovieDetailInterface}\n     */\n    public get modelValue(): MovieDetailInterface {\n        const {\n            plot,\n            rated,\n            genre,\n            poster,\n            runtime,\n            released,\n            production,\n            score,\n            ratings,\n            figure,\n            title,\n            year,\n            id,\n            type\n        } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                plot,\n                rated,\n                genre,\n                poster,\n                runtime,\n                released,\n                production,\n                score.modelValue,\n                ratings.modelValue,\n                figure.modelValue,\n                title,\n                year,\n                id,\n                type\n            ])\n        ) {\n            return {\n                plot,\n                rated,\n                genre,\n                poster,\n                runtime,\n                released,\n                production,\n                score: score.modelValue,\n                ratings: ratings.modelValue,\n                figure: figure.modelValue,\n                title,\n                year,\n                id,\n                type\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieDetailModel;\n","import MovieFigureModel from '../movie-figure.model';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Movie Figure Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieFigureTranslatorHelper {\n    /**\n     * Translate Rest To Movie Figure\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRatingItem({\n        Director,\n        Writer,\n        Actors\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Director' | 'Writer' | 'Actors'\n    >): MovieFigureModel {\n        return new MovieFigureModel()\n            .setDirector(Director)\n            .setWritter(Writer)\n            .setActors(Actors);\n    }\n}\n\nexport default MovieFigureTranslatorHelper;\n","import ScoreModel from '../score.model';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Score Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ScoreTranslatorHelper {\n    /**\n     * Translate Rest To Score\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToScore({\n        Metascore,\n        imdbVotes,\n        imdbRating\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Metascore' | 'imdbRating' | 'imdbVotes'\n    >): ScoreModel {\n        return new ScoreModel()\n            .setMetaScore(Metascore)\n            .setImdbRating(imdbRating)\n            .setImdbVotes(imdbVotes);\n    }\n}\n\nexport default ScoreTranslatorHelper;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { RatingItemInterface } from './interface/model.interface';\n\n/**\n * Rating Item Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingItemModel extends ModelAbstract<\n    RatingItemInterface\n> {\n    private source: string = '';\n\n    private value: string = '';\n\n    /**\n     * Setter Source\n     * @param {string} source - source rating\n     * @return {this}\n     */\n    public setSource(source: string): this {\n        this.source = source;\n        return this;\n    }\n\n    /**\n     * Setter Value\n     * @param {string} source - value rating\n     * @return {this}\n     */\n    public setValue(value: string): this {\n        this.value = value;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {RatingItemInterface}\n     */\n    public get modelValue(): RatingItemInterface {\n        const { source, value } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                source,\n                value\n            ])\n        ) {\n            return {\n                source,\n                value\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default RatingItemModel;\n","import { Rating } from '../../../generated/api/detail-api.interface';\nimport RatingItemModel from '../rating-item.model';\n\n/**\n * Rating Item Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingItemTranslatorHelper {\n    /**\n     * Translate Rest To Rating Item\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRatingItem({\n        Source,\n        Value\n    }: Rating): RatingItemModel {\n        return new RatingItemModel()\n            .setSource(Source)\n            .setValue(Value);\n    }\n}\n\nexport default RatingItemTranslatorHelper;\n","import RatingModel from '../rating.model';\nimport RatingItemTranslatorHelper from './rating-item-translator.helper';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Rating Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingTranslatorHelper {\n    /**\n     * Translate Rest To Rating\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRating({\n        Ratings\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Ratings'\n    >): RatingModel {\n        return new RatingModel().setItem(\n            Ratings.map(\n                RatingItemTranslatorHelper.translateRESTToRatingItem\n            )\n        );\n    }\n}\n\nexport default RatingTranslatorHelper;\n","import MovieDetailModel from '../movie-detail.model';\nimport { MovieType } from '../../../interface/movie-type.interface';\nimport MovieFigureTranslatorHelper from './movie-figure-translator.helper';\nimport ScoreTranslatorHelper from '../../general/helper/score-translator.helper';\nimport RatingTranslatorHelper from '../../general/helper/rating-translator.helper';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\nimport { RootObjectAPIErrorResponse } from '../../../generated/api/error-api.interface';\n\n/**\n * Movie Detail Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieDetailTranslatorHelper {\n    /**\n     * Translate Rest To Movie Detail\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieDetail({\n        Response,\n        ...res\n    }:\n        | RootObjectAPIErrorResponse\n        | RootObjectDetailAPIResponse): MovieDetailModel {\n        if (Response === 'True') {\n            const {\n                Title,\n                Year,\n                imdbID,\n                Type,\n                Plot,\n                Rated,\n                Genre,\n                Poster,\n                Runtime,\n                Released,\n                Production,\n                Metascore,\n                imdbVotes,\n                imdbRating,\n                Ratings,\n                Director,\n                Actors,\n                Writer\n            } = res as Omit<\n                RootObjectDetailAPIResponse,\n                'Response'\n            >;\n\n            return new MovieDetailModel()\n                .setTitle(Title)\n                .setYear(Year)\n                .setId(imdbID)\n                .setType(Type as MovieType)\n                .setPlot(Plot)\n                .setRated(Rated)\n                .setGenre(Genre)\n                .setPoster(Poster)\n                .setRuntime(Runtime)\n                .setReleased(Released)\n                .setProduction(Production)\n                .setScore(\n                    ScoreTranslatorHelper.translateRESTToScore(\n                        {\n                            Metascore,\n                            imdbRating,\n                            imdbVotes\n                        }\n                    )\n                )\n                .setRatings(\n                    RatingTranslatorHelper.translateRESTToRating(\n                        { Ratings }\n                    )\n                )\n                .setFigure(\n                    MovieFigureTranslatorHelper.translateRESTToRatingItem(\n                        {\n                            Actors,\n                            Director,\n                            Writer\n                        }\n                    )\n                );\n        }\n\n        throw new Error('API Error');\n    }\n}\n\nexport default MovieDetailTranslatorHelper;\n","import MovieRepositoryImplementation from './implementation/movie';\n\nconst RepositoryRestAPIService = {\n    MovieRepository: MovieRepositoryImplementation.singleton\n};\n\nexport default RepositoryRestAPIService;\n","import { MovieRepositoryInterface as Repo } from '../../../movie.repository';\nimport APIListRequestModel from '../../../../model/api/api-list-request.model';\nimport APIClientBuilder from '../../../../modules/api/builder/api-client.builder';\nimport APIDetailRequestModel from '../../../../model/api/api-detail-request.model';\nimport { RootObjectListAPIResponse } from '../../../../generated/api/list-api.interface';\nimport { RootObjectAPIErrorResponse } from '../../../../generated/api/error-api.interface';\nimport { RootObjectDetailAPIResponse } from '../../../../generated/api/detail-api.interface';\nimport MovieListTranslatorHelper from '../../../../model/movie/helper/movie-list-translator.helper';\nimport MovieDetailTranslatorHelper from '../../../../model/movie/helper/movie-detail-translator.helper';\nimport {\n    APIDetailRequestInterface,\n    APIListRequestInterface\n} from '../../../../model/api/interface/model.interface';\nimport {\n    MovieListInterface,\n    MovieDetailInterface\n} from '../../../../model/movie/interface/model.interface';\nimport {\n    API_KEY,\n    API_URI\n} from '../../../../../env/env.config';\n/**\n * Generate Class\n * @author Irfan Andriansyah <irfan@99.co>\n * @description\n * @since 2020.09.17\n */\nclass MovieRepositoryImplementation implements Repo {\n    constructor(\n        private apiURI: string,\n        private apiKey: string\n    ) {\n        this.getListMovie = this.getListMovie.bind(this);\n        this.getDetailMovie = this.getDetailMovie.bind(\n            this\n        );\n    }\n\n    /**\n     * Get List Movie\n     * @param {APIListRequestModel} param - api list request\n     * @return {Promise<MovieListInterface>}\n     */\n    public getListMovie(\n        param: APIListRequestModel\n    ): Promise<MovieListInterface | undefined> {\n        const { apiKey, apiURI } = this;\n\n        return new APIClientBuilder<\n            | RootObjectListAPIResponse\n            | RootObjectAPIErrorResponse,\n            APIListRequestInterface,\n            MovieListInterface\n        >()\n            .setApiKey(apiKey)\n            .setApiURI(apiURI)\n            .setParam(param)\n            .setFuncTranslator(\n                MovieListTranslatorHelper.translateRESTToMovieList\n            )\n            .execute();\n    }\n\n    /**\n     * Get Detail Movie\n     * @param {APIDetailRequestInterface} param - api detail request\n     * @return {Promise<MovieDetailInterface>}\n     */\n    getDetailMovie(\n        param: APIDetailRequestModel\n    ): Promise<MovieDetailInterface | undefined> {\n        const { apiKey, apiURI } = this;\n\n        return new APIClientBuilder<\n            | RootObjectDetailAPIResponse\n            | RootObjectAPIErrorResponse,\n            APIDetailRequestInterface,\n            MovieDetailInterface\n        >()\n            .setApiKey(apiKey)\n            .setApiURI(apiURI)\n            .setParam(param)\n            .setFuncTranslator(\n                MovieDetailTranslatorHelper.translateRESTToMovieDetail\n            )\n            .execute();\n    }\n\n    /**\n     * Singleton Movie Repository\n     * @return {Repo}\n     */\n    public static singleton(): Repo {\n        return new MovieRepositoryImplementation(\n            API_URI,\n            API_KEY\n        );\n    }\n}\n\nexport default MovieRepositoryImplementation;\n","export const API_URI = 'http://www.omdbapi.com';\n\nexport const API_KEY = 'faf7e5bb';\n","import React, { FunctionComponent, useEffect } from 'react';\nimport APIListRequestModel from '../../../shared/model/api/api-list-request.model';\nimport RepositoryRestAPIService from '../../../shared/repository/rest';\n\n/**\n * Movie List Page\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nconst MovieListPage: FunctionComponent = () => {\n    useEffect(() => {\n        const param = new APIListRequestModel().setPage(1).setQuerySearch('Batman');\n        RepositoryRestAPIService\n            .MovieRepository().getListMovie(param).then((item) => {\n                console.debug(item);\n            });\n    });\n    return (\n        <div className=\"heading\">\n            Movie List Page\n        </div>\n    );\n};\n\nexport default MovieListPage;","import React, { FunctionComponent } from 'react';\n\n/**\n * Movie Detail Page\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nconst MovieDetailPage: FunctionComponent = () => {\n    return (\n        <div className=\"heading\">\n            Movie Detail Page\n        </div>\n    );\n};\n\nexport default MovieDetailPage;","import { ReactNode, FunctionComponent } from 'react';\n\nimport PokemonListPage from './movie-list/movie-list.page';\nimport PokemonDetailPage from './movie-detail/movie-detail.page';\nimport { RoutingModulesInterface } from '../../shared/modules/routing/interface/routing-modules.interface';\nimport { RoutingModulesDecorator, RoutingSubModulesDecorator } from '../../shared/modules/routing/decorator/router.decorator';\n\n/**\n * Pokemon Router\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\n@RoutingModulesDecorator('')\nclass PokemonRouter implements RoutingModulesInterface {\n    render(): ReactNode {\n        return null;\n    }\n\n    /**\n     * Movie Detail Path\n     * @return {FunctionComponent}\n     */\n    @RoutingSubModulesDecorator('/detail/:id')\n    public movieDetailPath(): FunctionComponent {\n        return PokemonDetailPage;\n    }\n\n    /**\n     * Movie Search Path\n     * @return {FunctionComponent}\n     */\n    @RoutingSubModulesDecorator('/')\n    public movieListPage(): FunctionComponent {\n        return PokemonListPage;\n    }\n}\n\nexport default PokemonRouter;","import MovieRouter from './content/movie/movie.router';\nimport RoutingAppAbstract from './shared/modules/routing/abstract/routing-app.abstract';\n\n/**\n * Apps Instance\n * @returns {ReactElement}\n */\nclass App extends RoutingAppAbstract {\n    /**\n     * Modules\n     * @return {Object[]}\n     */\n    get modules(): Object[] {\n        return [\n            MovieRouter\n        ];\n    }\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { PureComponent, ReactNode } from 'react';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\n\nimport { RoutingItemInterface } from '../interface/routing-item.interface';\n\n/**\n * Routing App\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nabstract class RoutingAppAbstract extends PureComponent {\n    /**\n     * Generate Routing\n     * @param {Object[]} modules - modules react\n     * @return {ReactNode}\n     */\n    public static generateRouting(\n        modules: Object[]\n    ): ReactNode {\n        return (\n            <Switch>\n                {modules.map((ModulesItem: any) => {\n                    const controllerPath: string = Reflect.getMetadata('modules', ModulesItem);\n                    const routes: RoutingItemInterface[] = Reflect\n                        .getMetadata(\n                            'submodules',\n                            ModulesItem\n                        ) || [];\n                    const Modules = new ModulesItem();\n\n                    return (\n                        <Route path={controllerPath} key={controllerPath}>\n                            {Modules.render()}         \n                            {RoutingAppAbstract.generateRoutingItem(\n                                Modules,\n                                routes,\n                                controllerPath\n                            )}\n                            \n                        </Route>\n                    );\n                })}\n            </Switch>\n        );\n    }\n\n    /**\n     * Generate Routing Item\n     * @param {Object} modules - object class\n     * @param {RoutingItemInterface[]} routes - routes list\n     * @param {string} modulesPath - path uri\n     * @return {ReactNode}\n     */\n    public static generateRoutingItem(\n        modules: Object,\n        routes: RoutingItemInterface[],\n        modulesPath: string\n    ): ReactNode {\n        return (\n            <Switch>\n                {routes.map(({ methodName, ...res }) => {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const Component: any = (modules as any)[methodName]();\n                    \n                    return (\n                        <Route exact path={`${modulesPath}${res.path}`} key={res.path}>\n                            <Component />\n                        </Route>\n                    );\n                })}\n            </Switch>\n        );\n    }\n\n    abstract get modules(): Object[];\n\n    /**\n     * Render\n     */\n    render(): ReactNode {\n        return (\n            <HashRouter>\n                {RoutingAppAbstract.generateRouting(this.modules)}\n            </HashRouter>\n        );\n    }\n}\n\nexport default RoutingAppAbstract;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './shared/style/style.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}