{"version":3,"sources":["shared/component/molecules/movies-card/style/style.module.css","shared/component/molecules/header/style/style.module.css","shared/component/atomic/text/style/style.module.css","content/movie/movie-list/views/style/style.module.css","shared/component/atomic/card/style/style.module.css","content/movie/movie-list/context/movie-list.context.ts","shared/helper/string.helper.ts","shared/helper/validator.helper.ts","shared/component/atomic/card/card.component.tsx","shared/component/atomic/text/text.component.tsx","shared/component/molecules/movies-card/movies-card.component.tsx","shared/component/molecules/header/header.component.tsx","content/movie/movie-list/views/movie-list.views.tsx","shared/helper/intersection-observer.helper.ts","shared/modules/routing/decorator/router.decorator.ts","shared/abstract/model.abstract.ts","shared/model/api/api-list-request.model.ts","shared/modules/api/builder/api-client.builder.ts","shared/model/general/pagination.model.ts","shared/model/general/constant/pagination.const.ts","shared/model/movie/movie-list.model.ts","shared/model/movie/movie-list-item.model.ts","shared/model/movie/helper/movie-list-item-translator.helper.ts","shared/model/general/helper/pagination-translator.helper.ts","shared/model/movie/helper/movie-list-translator.helper.ts","shared/model/general/score.model.ts","shared/model/general/rating.model.ts","shared/model/movie/movie-figure.model.ts","shared/model/movie/movie-detail.model.ts","shared/model/movie/helper/movie-figure-translator.helper.ts","shared/model/general/helper/score-translator.helper.ts","shared/model/general/rating-item.model.ts","shared/model/general/helper/rating-item-translator.helper.ts","shared/model/general/helper/rating-translator.helper.ts","shared/model/movie/helper/movie-detail-translator.helper.ts","shared/repository/rest/index.ts","shared/repository/rest/implementation/movie/index.ts","env/env.config.ts","content/movie/movie-list/helper/movie-list.helper.ts","shared/reducers/movie-list/constant/movie-list.const.ts","shared/reducers/pagination/constant/pagination.const.ts","shared/reducers/pagination/action/pagination.action.ts","content/movie/movie-list/view-model/movie-list.view-model.tsx","shared/reducers/movie-list/action/movie-list.action.ts","content/movie/movie-list/movie-list.page.tsx","content/movie/movie-detail/movie-detail.page.tsx","content/movie/movie.router.tsx","shared/reducers/movie-list/index.ts","shared/reducers/pagination/index.ts","shared/reducers/movie-detail/constant/movie-detail.const.ts","shared/reducers/movie-detail/index.ts","shared/reducers/index.ts","shared/modules/redux/builder/store.builder.ts","App.tsx","shared/modules/routing/abstract/routing-app.abstract.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MovieListContext","createContext","activeMovie","id","poster","title","type","year","query","onFetchAPI","setQuery","setActiveMovie","StringHelper","number","test","parseInt","obj","Object","keys","filter","item","map","join","ValidatorHelper","param","undefined","length","verifiedIsNotEmpty","verifiedIsNotNull","CardComponent","className","res","objToString","style","card","TextComponent","align","color","styling","fontWeight","text","textAlign","defaultProps","MoviesCardComponent","onClick","container","alt","src","role","image","content","to","list","listItem","HeaderComponent","value","onChange","useState","valueTextTmp","setValueTextTmp","input","useRef","useEffect","firstRow","secondRow","htmlFor","ref","autoComplete","placeholder","e","currentTarget","onKeyUp","key","alert","MovieListViews","movieList","totalResult","isFetching","setIsFetching","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight","useInfiniteScroll","useContext","result","pathModules","ModelAbstract","APIListRequestModel","page","this","s","APIClientBuilder","apiKey","apiURI","funcTranslator","func","apikey","bulkVerifiedIsNotEmpty","fetchAPI","modelValue","then","Error","url","params","Axios","get","data","status","PaginationModel","perPage","totalPage","MovieListModel","pagination","itemList","MovieListItemModel","MovieListItemTranslatorHelper","Poster","Title","Type","Year","imdbID","setId","setPoster","setTitle","setType","setYear","PaginationTranslatorHelper","totalResults","validateNumberAndParsedToInteger","Math","ceil","setPage","setPerPage","setTotalPage","setTotalResult","translateRESTToMovieListItem","translateRESTToPagination","MovieListTranslatorHelper","Response","Search","setItem","setPagination","ScoreModel","metaScore","imdbRating","imdbVotes","RatingModel","MovieFigureModel","director","writter","actors","MovieDetailModel","plot","rated","genre","runtime","released","production","score","ratings","figure","MovieFigureTranslatorHelper","Director","Writer","Actors","setDirector","setWritter","setActors","ScoreTranslatorHelper","Metascore","setMetaScore","setImdbRating","setImdbVotes","RatingItemModel","source","RatingItemTranslatorHelper","Source","Value","setSource","setValue","RatingTranslatorHelper","Ratings","translateRESTToRatingItem","MovieDetailTranslatorHelper","Plot","Rated","Genre","Runtime","Released","Production","setPlot","setRated","setGenre","setRuntime","setReleased","setProduction","setScore","translateRESTToScore","setRatings","translateRESTToRating","setFigure","RepositoryRestAPIService","MovieRepository","getListMovie","bind","getDetailMovie","setApiKey","setApiURI","setParam","setFuncTranslator","translateRESTToMovieList","execute","response","translateRESTToMovieDetail","MovieRepositoryImplementation","singleton","MovieListHelper","querySearch","generateParameter","repo","setQuerySearch","DEFAULT_MOVIE_LIST","DEFAULT_PAGINATION","setPageAction","dispatch","payload","MovieListViewModel","useDispatch","useSelector","contextValue","setMovieListAction","setPaginationAction","Provider","MovieListPage","MovieDetailPage","RoutingSubModulesDecorator","pathSubModules","target","methodName","routes","Reflect","getMetadata","constructor","path","defineMetadata","PokemonRouter","hasMetadata","PokemonDetailPage","PokemonListPage","MovieListReducers","state","action","PaginationReducers","DEFAULT_MOVIE_DETAIL","MovieDetailReducers","property","Reducers","combineReducers","detail","StoreBuilder","reducers","composeEnhancers","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","setReducers","generateStore","App","MovieRouter","props","store","modules","ModulesItem","controllerPath","Modules","render","RoutingAppAbstract","generateRoutingItem","modulesPath","Component","exact","generateRouting","PureComponent","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a576fd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__3sVtG\",\"image\":\"style_image__3HElq\",\"container\":\"style_container__OYek4\",\"content\":\"style_content__vODQq\",\"list\":\"style_list__3ashZ\",\"title\":\"style_title__3Gxkx\",\"listItem\":\"style_listItem__3xY17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstRow\":\"style_firstRow__1Uo8l\",\"secondRow\":\"style_secondRow__2u9Gq\",\"input\":\"style_input__1xlrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"style_text__2YjPo\",\"heading\":\"style_heading__-SwXk\",\"default\":\"style_default__1v7WN\",\"caption\":\"style_caption__3uUtY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"style_list__bPBR2\",\"result\":\"style_result__2w9xx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__1ScRM\"};","import { createContext } from 'react';\nimport { MovieListContextInterface } from './interfaces/context.interface';\n\nconst MovieListContext = createContext<\n    MovieListContextInterface\n>({\n    activeMovie: {\n        id: '',\n        poster: '',\n        title: '',\n        type: 'movie',\n        year: ''\n    },\n    query: '',\n    onFetchAPI: () => {},\n    setQuery: () => {},\n    setActiveMovie: () => {}\n});\n\nexport default MovieListContext;\n","/**\n * String Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass StringHelper {\n    /**\n     * Validate Number And Parsed To Integer\n     * @param {unknow} number - parameter for parsing this method\n     * @return {number}\n     */\n    static validateNumberAndParsedToInteger(\n        number: unknown\n    ): number {\n        if (\n            typeof number === 'number' ||\n            typeof number === 'bigint' ||\n            /^-?\\d*(\\.\\d+)?$/.test(`${number}`)\n        ) {\n            return parseInt(`${number}`, 10);\n        }\n\n        return 0;\n    }\n\n    /**\n     * Object To String\n     * @param {Record<string, string>} obj - object classname\n     * @return {string}\n     */\n    static objToString(\n        obj: Record<string, boolean>\n    ): string {\n        return Object.keys(obj)\n            .filter((item: string) => obj[item])\n            .map((item: string) => item)\n            .join(' ');\n    }\n}\n\nexport default StringHelper;\n","/**\n * Validator Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ValidatorHelper {\n    /**\n     * Verified Is Not Empty\n     * @param {unknown} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static verifiedIsNotEmpty(param: unknown): boolean {\n        return (\n            [undefined, null, ''].filter(\n                (item: unknown) => param === item\n            ).length === 0\n        );\n    }\n\n    /**\n     * Verified Is Not Null\n     * @param {unknown} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static verifiedIsNotNull(param: unknown): boolean {\n        return (\n            [undefined, null].filter(\n                (item: unknown) => param === item\n            ).length === 0\n        );\n    }\n\n    /**\n     * Bulk Verified Is Not Empty\n     * @param {unknown[]} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static bulkVerifiedIsNotEmpty(\n        param: unknown[]\n    ): boolean {\n        return (\n            param.filter(\n                (item) =>\n                    !ValidatorHelper.verifiedIsNotEmpty(\n                        item\n                    )\n            ).length === 0\n        );\n    }\n\n    /**\n     * Bulk Verified Is Not Null\n     * @param {unknown[]} param - parameter to check\n     * Validator checking parameter input is not undefined / null\n     */\n    static bulkVerifiedIsNotNull(\n        param: unknown[]\n    ): boolean {\n        return (\n            param.filter(\n                (item) =>\n                    !ValidatorHelper.verifiedIsNotNull(item)\n            ).length === 0\n        );\n    }\n}\n\nexport default ValidatorHelper;\n","import React, { FunctionComponent } from 'react';\nimport StringHelper from '../../../helper/string.helper';\nimport ValidatorHelper from '../../../helper/validator.helper';\nimport { CardPropsInterface } from './interface/component.interface';\n\nimport style from './style/style.module.css';\n\n/**\n * Card Component\n * @author Irfan Andriansyah <irfan@99.co>\n * @description \n * @since 2020.09.18\n */\nconst CardComponent: FunctionComponent<CardPropsInterface> = ({\n    className,\n    ...res\n}) => {\n    return (\n        <div\n            {...res}\n            className={StringHelper.objToString({\n                [`${className}`]: ValidatorHelper.verifiedIsNotEmpty(className),\n                [style.card]: true\n            })}\n        />\n    );\n};\n\nexport default CardComponent;","import PropTypes from 'prop-types';\nimport React, { FunctionComponent, Validator } from 'react';\n\nimport StringHelper from '../../../helper/string.helper';\nimport ValidatorHelper from '../../../helper/validator.helper';\nimport {\n    TextPropsInterace,\n    ComponentStylingTypography,\n    ComponentFontWeightTypography,\n} from './interface/component.interface';\n\nimport style from './style/style.module.css';\n\n/**\n * Text Component\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst TextComponent: FunctionComponent<TextPropsInterace> = ({\n    align,\n    color,\n    styling,\n    className,\n    fontWeight,\n    ...res\n}) => {\n    return (\n        <p\n            {...res}\n            className={StringHelper.objToString({\n                [style.text]: true,\n                [style[`${styling}`]]: ValidatorHelper.verifiedIsNotEmpty(styling),\n                [`${className}`]: ValidatorHelper.verifiedIsNotEmpty(className),\n            })}\n            style={{\n                ...res.style,\n                color,\n                fontWeight,\n                textAlign: align\n            }}\n        />\n    );\n};\n\nTextComponent.propTypes = {\n    color: PropTypes.string,\n    styling: PropTypes.oneOf<ComponentStylingTypography>([\n        'caption',\n        'heading',\n        'default'\n    ]) as Validator<ComponentStylingTypography>,\n    fontWeight: PropTypes.oneOf<ComponentFontWeightTypography>([\n        300,\n        400,\n        500,\n        600,\n        700\n    ]) as Validator<ComponentFontWeightTypography>\n};\n\nTextComponent.defaultProps = {\n    color: undefined,\n    styling: 'default',\n    fontWeight: 400\n};\n\nexport default TextComponent;","import PropTypes from 'prop-types';\nimport React, { FunctionComponent, Validator } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport StringHelper from '../../../helper/string.helper';\nimport CardComponent from '../../atomic/card/card.component';\nimport TextComponent from '../../atomic/text/text.component';\nimport { MovieType } from '../../../interface/movie-type.interface';\nimport {  MoviesCardInterface } from './interface/component.interface';\n\nimport style from './style/style.module.css';\n\n/**\n * Movies Card Component\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst MoviesCardComponent: FunctionComponent<MoviesCardInterface> = ({\n    className,\n    id,\n    poster,\n    title,\n    type,\n    year,\n    onClick,\n    ...res\n}) => {\n    return (\n        <CardComponent\n            {...res}\n            className={StringHelper.objToString({\n                [style.card]: true,\n                'ui-movies-card': true\n            })}\n        >\n            <div className={style.container}>\n                <img\n                    alt={title}\n                    src={poster}\n                    onClick={onClick}\n                    role='presentation'\n                    className={StringHelper.objToString({\n                        [style.image]: true,\n                        'ui-movies-card__image': true\n                    })}\n                />\n                <Link\n                    className={style.content}\n                    to={`/detail/${id}`}\n                >\n                    <div className={style.title}>\n                        <TextComponent\n                            styling=\"heading\"\n                            fontWeight={500}\n                            color=\"#222b45\"\n                            className={StringHelper.objToString({\n                            \n                                'ui-movies-card__title': true\n                            })}\n                        >\n                            {title}\n                        </TextComponent>\n                    </div>\n                    <ul className={style.list}>\n                        <li>\n                            <TextComponent\n                                styling=\"caption\"\n                                color=\"#697684\"\n                                className={StringHelper.objToString({\n                                    [style.listItem]: true,\n                                    'ui-movies-card__list-item': true\n                                })}\n                            >\n                                {type}\n                            </TextComponent>\n                        </li>\n                        <li>\n                            <TextComponent\n                                styling=\"caption\"\n                                color=\"#697684\"\n                                className={StringHelper.objToString({\n                                    [style.listItem]: true,\n                                    'ui-movies-card__list-item': true\n                                })}\n                            >\n                                {year}\n                            </TextComponent>\n                        </li>\n                    </ul>\n                </Link>\n            </div>\n        </CardComponent>\n    );\n};\n\nMoviesCardComponent.propTypes = {\n    title: PropTypes.string.isRequired,\n    year: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    type: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.oneOf<MovieType>(['episode', 'movie', 'series'])\n    ]).isRequired as Validator<MovieType>,\n    poster: PropTypes.string.isRequired,  \n};\n\nMoviesCardComponent.defaultProps = {\n    type: 'episode'\n};\n\nexport default MoviesCardComponent;","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n    FunctionComponent,\n    RefObject,\n    useEffect,\n    useRef,\n    useState\n} from 'react';\n\nimport { HeaderPropsInterface } from './interface/component.interface';\n\nimport style from './style/style.module.css';\n\n/**\n * Header Component\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst HeaderComponent: FunctionComponent<HeaderPropsInterface> = ({\n    value,\n    onChange\n}) => {\n    const [valueTextTmp, setValueTextTmp] = useState<string>('');\n    const input = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        setValueTextTmp(value);\n    }, [value]);\n\n    /**\n     * On Key Up\n     * @param {React.KeyboardEvent<HTMLInputElement>} event \n     */\n    const onKeyUp = (\n        { key }: React.KeyboardEvent<HTMLInputElement>\n    ): void => {\n        if (key === 'Enter' && valueTextTmp.length > 0) {\n            onChange(valueTextTmp);\n        } else if (key === 'Enter' && valueTextTmp.length === 0) {\n            // eslint-disable-next-line no-alert\n            alert('Search Bar Is Null');\n        }\n    };\n\n    return (\n        <>\n            <div className={style.firstRow}>\n                <div className=\"ui-container\" />\n            </div>\n            <div className={style.secondRow}>\n                <div className=\"ui-container\">\n                    <div className={style.input}>\n                        <label htmlFor=\"search\">\n                            <span className=\"material-icons\">\n                                search\n                            </span>\n                        </label>\n                        <input\n                            id=\"search\"\n                            type=\"text\"\n                            ref={input as RefObject<HTMLInputElement>}\n                            autoComplete=\"off\"\n                            placeholder=\"Ketikan Film Yang Akan Anda Cari\"\n                            value={valueTextTmp}\n                            onChange={(e): void => {\n                                setValueTextTmp(e.currentTarget.value);\n                            }}\n                            onKeyUp={onKeyUp}\n                        />\n                        <button\n                            type=\"button\"\n                        >\n                            Cari Film\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default HeaderComponent;","import PropTypes from 'prop-types';\nimport React, {\n    Validator,\n    useEffect,\n    useContext,\n    FunctionComponent\n} from 'react';\n\nimport MovieListContext from '../context/movie-list.context';\nimport { ViewsPropsInterface } from './interfaces/views.interface';\nimport { MovieType } from '../../../../shared/interface/movie-type.interface';\nimport { MovieListContextInterface } from '../context/interfaces/context.interface';\nimport { useInfiniteScroll } from '../../../../shared/helper/intersection-observer.helper';\nimport { MovieListItemInterface } from '../../../../shared/model/movie/interface/model.interface';\nimport MoviesCardComponent from '../../../../shared/component/molecules/movies-card/movies-card.component';\n\nimport style from './style/style.module.css';\nimport HeaderComponent from '../../../../shared/component/molecules/header/header.component';\nimport TextComponent from '../../../../shared/component/atomic/text/text.component';\n\n/**\n * Movie List Views\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst MovieListViews: FunctionComponent<ViewsPropsInterface> = ({\n    item: movieList,\n    totalResult\n}) => {\n    const [isFetching, setIsFetching] = useInfiniteScroll();\n    const {\n        setActiveMovie,\n        query,\n        onFetchAPI,\n        setQuery\n    } = useContext<\n        MovieListContextInterface\n    >(MovieListContext);\n\n    useEffect(() => {\n        if (isFetching) {\n            onFetchAPI();\n            setIsFetching(false);\n        }\n        // eslint-disable-next-line\n    }, [isFetching]);\n\n    return (\n        <>\n            <HeaderComponent\n                value={query}\n                onChange={setQuery}\n            />\n            <div className=\"ui-container\">\n                {totalResult > 0 && (\n                    <TextComponent\n                        align=\"center\"\n                        styling=\"default\"\n                        className={style.result}\n                    >\n                        Hasil pencarian \n                        <b>\"{query}\"</b>\n                        sebanyak {totalResult} data\n                    </TextComponent>\n                )}\n                <div className={style.list}>\n                    {movieList.map((item) => (\n                        <MoviesCardComponent\n                            key={item.id}\n                            {...item}\n                            onClick={(): void => setActiveMovie(item)}\n                        />\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\nMovieListViews.propTypes = {\n    item: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.string,\n        year: PropTypes.string,\n        id: PropTypes.string,\n        type: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.oneOf<MovieType>(['episode', 'movie', 'series'])\n        ]),\n        poster: PropTypes.string,\n    })).isRequired as Validator<MovieListItemInterface[]>\n};\n\nMovieListViews.defaultProps = {\n    item: []\n};\n\nexport default MovieListViews;","import {\n    useState,\n    useEffect,\n    SetStateAction,\n    Dispatch\n} from 'react';\n\n/**\n * Intersection Observer Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nexport const useInfiniteScroll = (): [\n    boolean,\n    Dispatch<SetStateAction<boolean>>\n] => {\n    const [isFetching, setIsFetching] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return (): void =>\n            window.removeEventListener(\n                'scroll',\n                handleScroll\n            );\n        // eslint-disable-next-line\n    }, []);\n\n    /**\n     * Handle Scroll\n     * @return {void}\n     */\n    const handleScroll = (): void => {\n        if (\n            window.innerHeight +\n                document.documentElement.scrollTop !==\n                document.documentElement.offsetHeight ||\n            isFetching\n        )\n            return;\n        setIsFetching(true);\n    };\n\n    return [isFetching, setIsFetching];\n};\n","import 'reflect-metadata';\nimport { RoutingItemInterface } from '../interface/routing-item.interface';\n\n/**\n * Routing Modules\n * @param {string} pathModules - path modules\n * @returns {MethodDecorator}\n */\nexport const RoutingModulesDecorator = (\n    pathModules: string\n): ClassDecorator => (target: Object): void => {\n    Reflect.defineMetadata('modules', pathModules, target);\n\n    if (!Reflect.hasMetadata('submodules', target)) {\n        Reflect.defineMetadata('submodules', [], target);\n    }\n};\n\n/**\n * Routing Sub Modules\n * @param {string} pathSubModules - path sub modules\n * @returns {MethodDecorator}\n */\nexport const RoutingSubModulesDecorator = (\n    pathSubModules: string\n): MethodDecorator => (\n    target: Object,\n    methodName: string | symbol\n): void => {\n    const routes: RoutingItemInterface[] = [\n        ...(Reflect.getMetadata(\n            'submodules',\n            target.constructor\n        ) || []),\n        {\n            methodName,\n            path: pathSubModules\n        }\n    ];\n\n    Reflect.defineMetadata(\n        'submodules',\n        routes,\n        target.constructor\n    );\n};\n","/**\n * Model Abstract\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nabstract class ModelAbstract<T> {\n    abstract get modelValue(): T | undefined;\n}\n\nexport default ModelAbstract;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport { APIListRequestInterface } from './interface/model.interface';\n\n/**\n * API List Request Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass APIListRequestModel extends ModelAbstract<\n    APIListRequestInterface\n> {\n    private query: string = '';\n\n    private page: number = 1;\n\n    /**\n     * Setter ID\n     * @param {string} query - query search movies\n     * @return {this}\n     */\n    public setQuerySearch(query: string): this {\n        this.query = query;\n        return this;\n    }\n\n    /**\n     * Setter Page\n     * @param {string} page - page number\n     * @return {this}\n     */\n    public setPage(page: number): this {\n        this.page = page;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {APIListRequestInterface}\n     */\n    public get modelValue(): APIListRequestInterface {\n        const { query: s, page } = this;\n\n        return {\n            s,\n            page\n        };\n    }\n}\n\nexport default APIListRequestModel;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Axios from 'axios';\n\nimport ModelAbstract from '../../../abstract/model.abstract';\nimport ValidatorHelper from '../../../helper/validator.helper';\n\ntype TranslatorFuncType<T, R> = (\n    param: T\n) => ModelAbstract<R>;\n\n/**\n * API Client Builder\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass APIClientBuilder<T = any, P = any, R = any> {\n    private apiKey: string = '';\n\n    private apiURI: string = '';\n\n    private param: ModelAbstract<P> | undefined;\n\n    private funcTranslator:\n        | TranslatorFuncType<T, R>\n        | undefined;\n\n    /**\n     * Set API Key\n     * @param {string} apiKey - api key\n     * @returns {this}\n     */\n    public setApiKey(apiKey: string): this {\n        this.apiKey = apiKey;\n        return this;\n    }\n\n    /**\n     * Set API URI\n     * @param {ModelAbstract<P>} param - parameter model\n     * @returns {this}\n     */\n    public setParam(param: ModelAbstract<P>): this {\n        this.param = param;\n        return this;\n    }\n\n    /**\n     * Set Param\n     * @param {string} apiURI - api uri\n     * @returns {this}\n     */\n    public setApiURI(apiURI: string): this {\n        this.apiURI = apiURI;\n        return this;\n    }\n\n    /**\n     * Set Func Translatr\n     * @param {string} apiURI - api uri\n     * @returns {this}\n     */\n    public setFuncTranslator(\n        func: TranslatorFuncType<T, R>\n    ): this {\n        this.funcTranslator = func;\n        return this;\n    }\n\n    /**\n     * Execute Builder\n     * @return {Promise<R | undefined>}\n     */\n    public execute(): Promise<R | undefined> {\n        const {\n            apiKey: apikey,\n            apiURI,\n            param,\n            funcTranslator\n        } = this;\n\n        if (\n            funcTranslator &&\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                apikey,\n                apiURI,\n                param\n            ])\n        ) {\n            return APIClientBuilder.fetchAPI<T>(\n                `${apiURI}`,\n                {\n                    apikey,\n                    ...(param as ModelAbstract<P>)\n                        .modelValue\n                }\n            )\n                .then(funcTranslator)\n                .then(({ modelValue }) => modelValue);\n        }\n\n        throw Error(\n            'API Key, API URL and Func Translator Must Be Defined'\n        );\n    }\n\n    /**\n     * Fetch API\n     * @description\n     */\n    private static fetchAPI<Type>(\n        url: string,\n        params: Record<string, any>\n    ): Promise<Type> {\n        return Axios.get<Type>(`${url}`, {\n            params\n        }).then(({ data, status }) => {\n            if (status === 200) {\n                return data;\n            }\n\n            throw new Error('Response Status 500');\n        });\n    }\n}\n\nexport default APIClientBuilder;\n","import { PER_PAGE } from './constant/pagination.const';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport { PaginationInterface } from './interface/model.interface';\n\n/**\n * Pagination Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass PaginationModel extends ModelAbstract<\n    PaginationInterface\n> {\n    private page: number = 1;\n\n    private perPage: number = PER_PAGE;\n\n    private totalPage: number = 0;\n\n    private totalResult: number = 0;\n\n    /**\n     * Set page\n     * @param {number} page - page value\n     */\n    public setPage(page: number): this {\n        this.page = page;\n        return this;\n    }\n\n    /**\n     * Set perPage\n     * @param {number} perPage - perPage value\n     */\n    public setPerPage(perPage: number): this {\n        this.perPage = perPage;\n        return this;\n    }\n\n    /**\n     * Set totalPage\n     * @param {number} totalPage - totalPage value\n     */\n    public setTotalPage(totalPage: number): this {\n        this.totalPage = totalPage;\n        return this;\n    }\n\n    /**\n     * Set totalResult\n     * @param {number} totalResult - totalResult value\n     */\n    public setTotalResult(totalResult: number): this {\n        this.totalResult = totalResult;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {PaginationInterface}\n     */\n    public get modelValue(): PaginationInterface {\n        const {\n            page,\n            perPage,\n            totalPage,\n            totalResult\n        } = this;\n\n        return {\n            page,\n            perPage,\n            totalPage,\n            totalResult\n        };\n    }\n}\n\nexport default PaginationModel;\n","import { PaginationInterface } from '../interface/model.interface';\n\nexport const PER_PAGE = 10;\n\nexport const DEFAULT_PAGINATION: PaginationInterface = {\n    page: 1,\n    perPage: 10,\n    totalPage: 0,\n    totalResult: 0\n};\n","import MovieListItemModel from './movie-list-item.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport PaginationModel from '../general/pagination.model';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieListInterface } from './interface/model.interface';\n\n/**\n * Movie List Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListModel extends ModelAbstract<\n    MovieListInterface\n> {\n    private item: MovieListItemModel[] = [];\n\n    private pagination: PaginationModel = new PaginationModel();\n\n    /**\n     * Setter Item\n     * @param {MovieListItemModel[]} item - movie list item\n     * @return {this}\n     */\n    public setItem(item: MovieListItemModel[]): this {\n        this.item = item;\n        return this;\n    }\n\n    /**\n     * Setter Pagination\n     * @param {PaginationModel} pagination - pagination model\n     * @return {this}\n     */\n    public setPagination(\n        pagination: PaginationModel\n    ): this {\n        this.pagination = pagination;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {MovieListInterface}\n     */\n    public get modelValue(): MovieListInterface {\n        const { item: itemList, pagination } = this;\n        const formattedItem = itemList.filter(\n            ValidatorHelper.verifiedIsNotEmpty\n        );\n\n        return {\n            item: formattedItem.map(\n                ({ modelValue }) => modelValue\n            ),\n            pagination: pagination.modelValue\n        };\n    }\n}\n\nexport default MovieListModel;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieType } from '../../interface/movie-type.interface';\nimport { MovieListItemInterface } from './interface/model.interface';\n\n/**\n * Movie List Item Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListItemModel extends ModelAbstract<\n    MovieListItemInterface\n> {\n    private title: string = '';\n\n    private year: string = '';\n\n    private id: string = '';\n\n    private type: MovieType = 'movie';\n\n    private poster: string = '';\n\n    /**\n     * Set title\n     * @param {string} title - title value\n     * @returns {this}\n     */\n    public setTitle(title: string): this {\n        this.title = title;\n        return this;\n    }\n\n    /**\n     * Set year\n     * @param {string} year - year value\n     * @returns {this}\n     */\n    public setYear(year: string): this {\n        this.year = year;\n        return this;\n    }\n\n    /**\n     * Set id\n     * @param {string} id - id value\n     * @returns {this}\n     */\n    public setId(id: string): this {\n        this.id = id;\n        return this;\n    }\n\n    /**\n     * Set type\n     * @param {MovieType} type - type value\n     * @returns {this}\n     */\n    public setType(type: MovieType): this {\n        this.type = type;\n        return this;\n    }\n\n    /**\n     * Set poster\n     * @param {string} poster - poster value\n     * @returns {this}\n     */\n    public setPoster(poster: string): this {\n        if (poster === 'N/A') {\n            this.poster =\n                'https://i.ibb.co/YZs7dm8/QPi5-Ux-X8-400x400.png';\n        } else {\n            this.poster = poster;\n        }\n\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): MovieListItemInterface {\n        const { title, year, id, type, poster } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                title,\n                year,\n                id,\n                poster\n            ])\n        ) {\n            return {\n                title,\n                year,\n                id,\n                type,\n                poster\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieListItemModel;\n","import MovieListItemModel from '../movie-list-item.model';\nimport { Search } from '../../../generated/api/list-api.interface';\nimport { MovieType } from '../../../interface/movie-type.interface';\n\n/**\n * Movie List Item Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListItemTranslatorHelper {\n    /**\n     * Translate Rest To Movie List Item\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieListItem({\n        Poster,\n        Title,\n        Type,\n        Year,\n        imdbID\n    }: Search): MovieListItemModel {\n        return new MovieListItemModel()\n            .setId(imdbID)\n            .setPoster(Poster)\n            .setTitle(Title)\n            .setType(Type as MovieType)\n            .setYear(Year);\n    }\n}\n\nexport default MovieListItemTranslatorHelper;\n","import PaginationModel from '../pagination.model';\nimport StringHelper from '../../../helper/string.helper';\nimport { RootObjectListAPIResponse } from '../../../generated/api/list-api.interface';\n\n/**\n * Pagination Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass PaginationTranslatorHelper {\n    /**\n     * Translate Rest To Rating Item\n     * @param {number} page - page number\n     * @param {number} perPage - per page option\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToPagination(\n        page: number,\n        perPage: number,\n        {\n            totalResults\n        }: Pick<RootObjectListAPIResponse, 'totalResults'>\n    ): PaginationModel {\n        const result = StringHelper.validateNumberAndParsedToInteger(\n            totalResults\n        );\n        const totalPage = Math.ceil(result / perPage);\n        return new PaginationModel()\n            .setPage(page)\n            .setPerPage(perPage)\n            .setTotalPage(totalPage)\n            .setTotalResult(result);\n    }\n}\n\nexport default PaginationTranslatorHelper;\n","import MovieListModel from '../movie-list.model';\nimport MovieListItemTranslatorHelper from './movie-list-item-translator.helper';\nimport { RootObjectListAPIResponse } from '../../../generated/api/list-api.interface';\nimport PaginationTranslatorHelper from '../../general/helper/pagination-translator.helper';\nimport { RootObjectAPIErrorResponse } from '../../../generated/api/error-api.interface';\nimport { PER_PAGE } from '../../general/constant/pagination.const';\nimport PaginationModel from '../../general/pagination.model';\n\nconst {\n    translateRESTToMovieListItem\n} = MovieListItemTranslatorHelper;\nconst {\n    translateRESTToPagination\n} = PaginationTranslatorHelper;\n\n/**\n * Movie List Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieListTranslatorHelper {\n    /**\n     * Translate Rest To Movie List\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieList({\n        Response,\n        ...res\n    }:\n        | RootObjectAPIErrorResponse\n        | RootObjectListAPIResponse): MovieListModel {\n        if (Response === 'True') {\n            const { Search, totalResults } = res as Omit<\n                RootObjectListAPIResponse,\n                'Response'\n            >;\n\n            return new MovieListModel()\n                .setItem(\n                    Search.map(translateRESTToMovieListItem)\n                )\n                .setPagination(\n                    translateRESTToPagination(1, PER_PAGE, {\n                        totalResults\n                    })\n                );\n        }\n\n        return new MovieListModel()\n            .setItem([])\n            .setPagination(new PaginationModel());\n    }\n}\n\nexport default MovieListTranslatorHelper;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { ScoreInterface } from './interface/model.interface';\n\n/**\n * Score Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ScoreModel extends ModelAbstract<ScoreInterface> {\n    private metaScore: string = '';\n\n    private imdbRating: string = '';\n\n    private imdbVotes: string = '';\n\n    /**\n     * Set metaScore\n     * @param {string} metaScore: metaScore value\n     * @return {this}\n     */\n    public setMetaScore(metaScore: string): this {\n        this.metaScore = metaScore;\n        return this;\n    }\n\n    /**\n     * Set imdbRating\n     * @param {string} imdbRating: imdbRating value\n     * @return {this}\n     */\n    public setImdbRating(imdbRating: string): this {\n        this.imdbRating = imdbRating;\n        return this;\n    }\n\n    /**\n     * Set imdbVotes\n     * @param {string} imdbVotes: imdbVotes value\n     * @return {this}\n     */\n    public setImdbVotes(imdbVotes: string): this {\n        this.imdbVotes = imdbVotes;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): ScoreInterface {\n        const { imdbRating, metaScore, imdbVotes } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                imdbRating,\n                metaScore,\n                imdbVotes\n            ])\n        ) {\n            return {\n                imdbRating,\n                metaScore,\n                imdbVotes\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default ScoreModel;\n","import RatingItemModel from './rating-item.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { RatingInterface } from './interface/model.interface';\n\n/**\n * Rating Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingModel extends ModelAbstract<RatingInterface> {\n    private item: RatingItemModel[] = [];\n\n    private value: string = '';\n\n    /**\n     * Setter Item\n     * @param {RatingItemModel[]} item - item rating\n     * @return {this}\n     */\n    public setItem(item: RatingItemModel[]): this {\n        this.item = item;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {RatingInterface}\n     */\n    public get modelValue(): RatingInterface {\n        const { item: itemList } = this;\n        const formattedItem = itemList.filter(\n            ValidatorHelper.verifiedIsNotEmpty\n        );\n\n        return {\n            item: formattedItem.map(\n                ({ modelValue }) => modelValue\n            )\n        };\n    }\n}\n\nexport default RatingModel;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieFigureInterface } from './interface/model.interface';\n\n/**\n * Movie Figure Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieFigureModel extends ModelAbstract<\n    MovieFigureInterface\n> {\n    private director: string = '';\n\n    private writter: string = '';\n\n    private actors: string = '';\n\n    /**\n     * Set Director\n     * @param {string} director - director value\n     * @retrun {this}\n     */\n    public setDirector(director: string): this {\n        this.director = director;\n        return this;\n    }\n\n    /**\n     * Set Writter\n     * @param {string} writter - writter value\n     * @retrun {this}\n     */\n    public setWritter(writter: string): this {\n        this.writter = writter;\n        return this;\n    }\n\n    /**\n     * Set Actors\n     * @param {string} actors - actors value\n     * @retrun {this}\n     */\n    public setActors(actors: string): this {\n        this.actors = actors;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {ScoreInterface}\n     */\n    public get modelValue(): MovieFigureInterface {\n        const { director, writter, actors } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                director,\n                writter,\n                actors\n            ])\n        ) {\n            return {\n                director,\n                writter,\n                actors\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieFigureModel;\n","import ScoreModel from '../general/score.model';\nimport RatingModel from '../general/rating.model';\nimport MovieFigureModel from './movie-figure.model';\nimport ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { MovieType } from '../../interface/movie-type.interface';\nimport { MovieDetailInterface } from './interface/model.interface';\n\n/**\n * Movie Detail Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieDetailModel extends ModelAbstract<\n    MovieDetailInterface\n> {\n    private title: string = '';\n\n    private year: string = '';\n\n    private id: string = '';\n\n    private type: MovieType = 'movie';\n\n    private plot: string = '';\n\n    private rated: string = '';\n\n    private genre: string = '';\n\n    private poster: string = '';\n\n    private runtime: string = '';\n\n    private released: string = '';\n\n    private production: string = '';\n\n    private score: ScoreModel = new ScoreModel();\n\n    private ratings: RatingModel = new RatingModel();\n\n    private figure: MovieFigureModel = new MovieFigureModel();\n\n    /**\n     * Set title\n     * @param {string} title - title value\n     * @returns {this}\n     */\n    public setTitle(title: string): this {\n        this.title = title;\n        return this;\n    }\n\n    /**\n     * Set year\n     * @param {string} year - year value\n     * @returns {this}\n     */\n    public setYear(year: string): this {\n        this.year = year;\n        return this;\n    }\n\n    /**\n     * Set id\n     * @param {string} id - id value\n     * @returns {this}\n     */\n    public setId(id: string): this {\n        this.id = id;\n        return this;\n    }\n\n    /**\n     * Set type\n     * @param {MovieType} type - type value\n     * @returns {this}\n     */\n    public setType(type: MovieType): this {\n        this.type = type;\n        return this;\n    }\n\n    /**\n     * Set plot\n     * @param {string} plot - plot value\n     * @return {this}\n     */\n    public setPlot(plot: string): this {\n        this.plot = plot;\n        return this;\n    }\n\n    /**\n     * Set rated\n     * @param {string} rated - rated value\n     * @return {this}\n     */\n    public setRated(rated: string): this {\n        this.rated = rated;\n        return this;\n    }\n\n    /**\n     * Set genre\n     * @param {string} genre - genre value\n     * @return {this}\n     */\n    public setGenre(genre: string): this {\n        this.genre = genre;\n        return this;\n    }\n\n    /**\n     * Set poster\n     * @param {string} poster - poster value\n     * @return {this}\n     */\n    public setPoster(poster: string): this {\n        this.poster = poster;\n        return this;\n    }\n\n    /**\n     * Set runtime\n     * @param {string} runtime - runtime value\n     * @return {this}\n     */\n    public setRuntime(runtime: string): this {\n        this.runtime = runtime;\n        return this;\n    }\n\n    /**\n     * Set released\n     * @param {string} released - released value\n     * @return {this}\n     */\n    public setReleased(released: string): this {\n        this.released = released;\n        return this;\n    }\n\n    /**\n     * Set production\n     * @param {string} production - production value\n     * @return {this}\n     */\n    public setProduction(production: string): this {\n        this.production = production;\n        return this;\n    }\n\n    /**\n     * Set score\n     * @param {ScoreModel} score - score value\n     * @return {this}\n     */\n    public setScore(score: ScoreModel): this {\n        this.score = score;\n        return this;\n    }\n\n    /**\n     * Set ratings\n     * @param {RatingModel} ratings - ratings value\n     * @return {this}\n     */\n    public setRatings(ratings: RatingModel): this {\n        this.ratings = ratings;\n        return this;\n    }\n\n    /**\n     * Set figure\n     * @param {MovieFigureModel} figure - figure value\n     * @return {this}\n     */\n    public setFigure(figure: MovieFigureModel): this {\n        this.figure = figure;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {MovieDetailInterface}\n     */\n    public get modelValue(): MovieDetailInterface {\n        const {\n            plot,\n            rated,\n            genre,\n            poster,\n            runtime,\n            released,\n            production,\n            score,\n            ratings,\n            figure,\n            title,\n            year,\n            id,\n            type\n        } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                plot,\n                rated,\n                genre,\n                poster,\n                runtime,\n                released,\n                production,\n                score.modelValue,\n                ratings.modelValue,\n                figure.modelValue,\n                title,\n                year,\n                id,\n                type\n            ])\n        ) {\n            return {\n                plot,\n                rated,\n                genre,\n                poster,\n                runtime,\n                released,\n                production,\n                score: score.modelValue,\n                ratings: ratings.modelValue,\n                figure: figure.modelValue,\n                title,\n                year,\n                id,\n                type\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default MovieDetailModel;\n","import MovieFigureModel from '../movie-figure.model';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Movie Figure Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieFigureTranslatorHelper {\n    /**\n     * Translate Rest To Movie Figure\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRatingItem({\n        Director,\n        Writer,\n        Actors\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Director' | 'Writer' | 'Actors'\n    >): MovieFigureModel {\n        return new MovieFigureModel()\n            .setDirector(Director)\n            .setWritter(Writer)\n            .setActors(Actors);\n    }\n}\n\nexport default MovieFigureTranslatorHelper;\n","import ScoreModel from '../score.model';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Score Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass ScoreTranslatorHelper {\n    /**\n     * Translate Rest To Score\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToScore({\n        Metascore,\n        imdbVotes,\n        imdbRating\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Metascore' | 'imdbRating' | 'imdbVotes'\n    >): ScoreModel {\n        return new ScoreModel()\n            .setMetaScore(Metascore)\n            .setImdbRating(imdbRating)\n            .setImdbVotes(imdbVotes);\n    }\n}\n\nexport default ScoreTranslatorHelper;\n","import ModelAbstract from '../../abstract/model.abstract';\nimport ValidatorHelper from '../../helper/validator.helper';\nimport { RatingItemInterface } from './interface/model.interface';\n\n/**\n * Rating Item Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingItemModel extends ModelAbstract<\n    RatingItemInterface\n> {\n    private source: string = '';\n\n    private value: string = '';\n\n    /**\n     * Setter Source\n     * @param {string} source - source rating\n     * @return {this}\n     */\n    public setSource(source: string): this {\n        this.source = source;\n        return this;\n    }\n\n    /**\n     * Setter Value\n     * @param {string} source - value rating\n     * @return {this}\n     */\n    public setValue(value: string): this {\n        this.value = value;\n        return this;\n    }\n\n    /**\n     * Getter Model Value\n     * @return {RatingItemInterface}\n     */\n    public get modelValue(): RatingItemInterface {\n        const { source, value } = this;\n\n        if (\n            ValidatorHelper.bulkVerifiedIsNotEmpty([\n                source,\n                value\n            ])\n        ) {\n            return {\n                source,\n                value\n            };\n        }\n\n        throw Error('Data Not Completed');\n    }\n}\n\nexport default RatingItemModel;\n","import { Rating } from '../../../generated/api/detail-api.interface';\nimport RatingItemModel from '../rating-item.model';\n\n/**\n * Rating Item Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingItemTranslatorHelper {\n    /**\n     * Translate Rest To Rating Item\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRatingItem({\n        Source,\n        Value\n    }: Rating): RatingItemModel {\n        return new RatingItemModel()\n            .setSource(Source)\n            .setValue(Value);\n    }\n}\n\nexport default RatingItemTranslatorHelper;\n","import RatingModel from '../rating.model';\nimport RatingItemTranslatorHelper from './rating-item-translator.helper';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\n\n/**\n * Rating Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass RatingTranslatorHelper {\n    /**\n     * Translate Rest To Rating\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToRating({\n        Ratings\n    }: Pick<\n        RootObjectDetailAPIResponse,\n        'Ratings'\n    >): RatingModel {\n        return new RatingModel().setItem(\n            Ratings.map(\n                RatingItemTranslatorHelper.translateRESTToRatingItem\n            )\n        );\n    }\n}\n\nexport default RatingTranslatorHelper;\n","import MovieDetailModel from '../movie-detail.model';\nimport { MovieType } from '../../../interface/movie-type.interface';\nimport MovieFigureTranslatorHelper from './movie-figure-translator.helper';\nimport ScoreTranslatorHelper from '../../general/helper/score-translator.helper';\nimport RatingTranslatorHelper from '../../general/helper/rating-translator.helper';\nimport { RootObjectDetailAPIResponse } from '../../../generated/api/detail-api.interface';\nimport { RootObjectAPIErrorResponse } from '../../../generated/api/error-api.interface';\n\n/**\n * Movie Detail Translator\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nclass MovieDetailTranslatorHelper {\n    /**\n     * Translate Rest To Movie Detail\n     * @param {Object} response - Response API\n     */\n    public static translateRESTToMovieDetail({\n        Response,\n        ...res\n    }:\n        | RootObjectAPIErrorResponse\n        | RootObjectDetailAPIResponse): MovieDetailModel {\n        if (Response === 'True') {\n            const {\n                Title,\n                Year,\n                imdbID,\n                Type,\n                Plot,\n                Rated,\n                Genre,\n                Poster,\n                Runtime,\n                Released,\n                Production,\n                Metascore,\n                imdbVotes,\n                imdbRating,\n                Ratings,\n                Director,\n                Actors,\n                Writer\n            } = res as Omit<\n                RootObjectDetailAPIResponse,\n                'Response'\n            >;\n\n            return new MovieDetailModel()\n                .setTitle(Title)\n                .setYear(Year)\n                .setId(imdbID)\n                .setType(Type as MovieType)\n                .setPlot(Plot)\n                .setRated(Rated)\n                .setGenre(Genre)\n                .setPoster(Poster)\n                .setRuntime(Runtime)\n                .setReleased(Released)\n                .setProduction(Production)\n                .setScore(\n                    ScoreTranslatorHelper.translateRESTToScore(\n                        {\n                            Metascore,\n                            imdbRating,\n                            imdbVotes\n                        }\n                    )\n                )\n                .setRatings(\n                    RatingTranslatorHelper.translateRESTToRating(\n                        { Ratings }\n                    )\n                )\n                .setFigure(\n                    MovieFigureTranslatorHelper.translateRESTToRatingItem(\n                        {\n                            Actors,\n                            Director,\n                            Writer\n                        }\n                    )\n                );\n        }\n\n        throw new Error('API Error');\n    }\n}\n\nexport default MovieDetailTranslatorHelper;\n","import MovieRepositoryImplementation from './implementation/movie';\n\nconst RepositoryRestAPIService = {\n    MovieRepository: MovieRepositoryImplementation.singleton\n};\n\nexport default RepositoryRestAPIService;\n","import { MovieRepositoryInterface as Repo } from '../../../movie.repository';\nimport APIListRequestModel from '../../../../model/api/api-list-request.model';\nimport APIClientBuilder from '../../../../modules/api/builder/api-client.builder';\nimport APIDetailRequestModel from '../../../../model/api/api-detail-request.model';\nimport { RootObjectListAPIResponse } from '../../../../generated/api/list-api.interface';\nimport { RootObjectAPIErrorResponse } from '../../../../generated/api/error-api.interface';\nimport { RootObjectDetailAPIResponse } from '../../../../generated/api/detail-api.interface';\nimport MovieListTranslatorHelper from '../../../../model/movie/helper/movie-list-translator.helper';\nimport MovieDetailTranslatorHelper from '../../../../model/movie/helper/movie-detail-translator.helper';\nimport {\n    APIDetailRequestInterface,\n    APIListRequestInterface\n} from '../../../../model/api/interface/model.interface';\nimport {\n    MovieListInterface,\n    MovieDetailInterface\n} from '../../../../model/movie/interface/model.interface';\nimport {\n    API_KEY,\n    API_URI\n} from '../../../../../env/env.config';\n/**\n * Generate Class\n * @author Irfan Andriansyah <irfan@99.co>\n * @description\n * @since 2020.09.17\n */\nclass MovieRepositoryImplementation implements Repo {\n    constructor(\n        private apiURI: string,\n        private apiKey: string\n    ) {\n        this.getListMovie = this.getListMovie.bind(this);\n        this.getDetailMovie = this.getDetailMovie.bind(\n            this\n        );\n    }\n\n    /**\n     * Get List Movie\n     * @param {APIListRequestModel} param - api list request\n     * @return {Promise<MovieListInterface>}\n     */\n    public getListMovie(\n        param: APIListRequestModel\n    ): Promise<MovieListInterface | undefined> {\n        const { apiKey, apiURI } = this;\n\n        return new APIClientBuilder<\n            | RootObjectListAPIResponse\n            | RootObjectAPIErrorResponse,\n            APIListRequestInterface,\n            MovieListInterface\n        >()\n            .setApiKey(apiKey)\n            .setApiURI(apiURI)\n            .setParam(param)\n            .setFuncTranslator(\n                MovieListTranslatorHelper.translateRESTToMovieList\n            )\n            .execute()\n            .then((response) => {\n                if (response) {\n                    return {\n                        ...response,\n                        pagination: {\n                            ...response.pagination,\n                            page: param.modelValue.page\n                        }\n                    };\n                }\n                return response;\n            });\n    }\n\n    /**\n     * Get Detail Movie\n     * @param {APIDetailRequestInterface} param - api detail request\n     * @return {Promise<MovieDetailInterface>}\n     */\n    getDetailMovie(\n        param: APIDetailRequestModel\n    ): Promise<MovieDetailInterface | undefined> {\n        const { apiKey, apiURI } = this;\n\n        return new APIClientBuilder<\n            | RootObjectDetailAPIResponse\n            | RootObjectAPIErrorResponse,\n            APIDetailRequestInterface,\n            MovieDetailInterface\n        >()\n            .setApiKey(apiKey)\n            .setApiURI(apiURI)\n            .setParam(param)\n            .setFuncTranslator(\n                MovieDetailTranslatorHelper.translateRESTToMovieDetail\n            )\n            .execute();\n    }\n\n    /**\n     * Singleton Movie Repository\n     * @return {Repo}\n     */\n    public static singleton(): Repo {\n        return new MovieRepositoryImplementation(\n            API_URI,\n            API_KEY\n        );\n    }\n}\n\nexport default MovieRepositoryImplementation;\n","export const API_URI = 'http://www.omdbapi.com';\n\nexport const API_KEY = 'faf7e5bb';\n","import APIListRequestModel from '../../../../shared/model/api/api-list-request.model';\nimport { MovieListInterface } from '../../../../shared/model/movie/interface/model.interface';\nimport RepositoryRestAPIService from '../../../../shared/repository/rest';\n\n/**\n * Movie List Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nclass MovieListHelper {\n    /**\n     * Fetch API Movie List\n     * @param {number} page - page number\n     * @param {string} querySearch - query search\n     * @return {Promise<MovieListInterface | undefined>}\n     */\n    public static async fetchAPI(\n        page: number,\n        querySearch: string\n    ): Promise<MovieListInterface | undefined> {\n        const param = MovieListHelper.generateParameter(\n            page,\n            querySearch\n        );\n        const repo = RepositoryRestAPIService.MovieRepository();\n        const response = await repo.getListMovie(param);\n\n        return response;\n    }\n\n    /**\n     * Generate Parameter API\n     * @param {number} page - page number\n     * @param {string} querySearch - query search\n     * @return {APIListRequestModel}\n     */\n    private static generateParameter(\n        page: number,\n        querySearch: string\n    ): APIListRequestModel {\n        return new APIListRequestModel()\n            .setPage(page)\n            .setQuerySearch(querySearch);\n    }\n}\n\nexport default MovieListHelper;\n","import { MovieListItemInterface } from '../../../model/movie/interface/model.interface';\n\nexport const SET_MOVIE_LIST_KEY = 'SET_MOVIE_LIST';\n\nexport const UNSET_MOVIE_LIST_KEY = 'UNSET_MOVIE_LIST';\n\nexport const DEFAULT_MOVIE_LIST: MovieListItemInterface[] = [];\n","import { PaginationReducerInterface } from '../interfaces/pagination-reducer.interface';\nimport { DEFAULT_PAGINATION as DEFAULT_VALUE } from '../../../model/general/constant/pagination.const';\n\nexport const SET_PAGE_KEY = 'SET_PAGE';\n\nexport const SET_PAGINATION_KEY = 'SET_PAGINATION';\n\nexport const UNSET_PAGINATION_KEY = 'UNSET_PAGINATION';\n\nexport const DEFAULT_PAGINATION: PaginationReducerInterface = {\n    pagination: DEFAULT_VALUE\n};\n","import { Dispatch } from 'redux';\n\nimport { PaginationInterface } from '../../../model/general/interface/model.interface';\nimport {\n    SET_PAGE_KEY,\n    SET_PAGINATION_KEY,\n    UNSET_PAGINATION_KEY\n} from '../constant/pagination.const';\n\n/**\n * Pagination Action\n * @param {PaginationInterface} pagination - pagination interface\n * @return {void}\n */\nexport const setPaginationAction = (\n    response: PaginationInterface\n) => (dispatch: Dispatch): void => {\n    dispatch({\n        type: SET_PAGINATION_KEY,\n        payload: response\n    });\n};\n\n/**\n * Pagination Action\n * @param {PaginationInterface} pagination - pagination interface\n * @return {void}\n */\nexport const setPageAction = (response: number) => (\n    dispatch: Dispatch\n): void => {\n    dispatch({\n        type: SET_PAGE_KEY,\n        payload: {\n            page: response\n        }\n    });\n};\n\n/**\n * Unset Pagination Action\n * @return {void}\n */\nexport const unsetPaginationAction = () => (\n    dispatch: Dispatch\n): void => {\n    dispatch({\n        type: UNSET_PAGINATION_KEY\n    });\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, {\n    FunctionComponent,\n    useEffect,\n    useState\n} from 'react';\n\nimport MovieListViews from '../views/movie-list.views';\nimport MovieListHelper from '../helper/movie-list.helper';\nimport MovieListContext from '../context/movie-list.context';\nimport { TypeValueReducers } from '../../../../shared/reducers';\nimport { MovieListContextInterface } from '../context/interfaces/context.interface';\nimport { MovieListItemInterface } from '../../../../shared/model/movie/interface/model.interface';\nimport {\n    setMovieListAction,\n    unsetMovieListAction\n} from '../../../../shared/reducers/movie-list/action/movie-list.action';\nimport {\n    setPageAction,\n    setPaginationAction,\n    unsetPaginationAction\n} from '../../../../shared/reducers/pagination/action/pagination.action';\n\n/**\n * Movie List View Model\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst MovieListViewModel: FunctionComponent<{}> = () =>  {\n    const dispatch = useDispatch();\n    const [query, setQuery] = useState<string>('Batman');\n    // const [showDialog, setShowDialog] = useState<boolean>(false);\n    const [activeMovie, setActiveMovie] = useState<MovieListItemInterface>(({\n        id: '',\n        poster: '',\n        title: '',\n        type: 'movie',\n        year: ''\n    }));\n\n    const {\n        page,\n        totalPage,\n        totalResult\n    } = useSelector(({\n        pagination: state\n    }: TypeValueReducers) => {\n        const {\n            page: valPage,\n            totalPage: valTotal,\n            totalResult: valTotalResult\n        } = state.pagination;\n\n        return {\n            page: valPage,\n            totalPage: valTotal,\n            totalResult: valTotalResult\n        };\n    });\n    \n    const movieList = useSelector(({ list: state }: TypeValueReducers) => {\n        return state.item;\n    });\n\n    /**\n     * Is Fetch API\n     * @return {void}\n     */\n    const isFetchAPI = (): void => {\n        if (page + 1 <= totalPage) {\n            dispatch(setPageAction(page + 1));\n        }\n    };\n\n    /**\n     * Fetch API\n     * @return {void}\n     */\n    const fetchAPI = (): void => {\n        try {\n            MovieListHelper.fetchAPI(page, query).then((response) => {\n                if (response && response.pagination.page === 1) {\n                    dispatch(unsetMovieListAction());\n                    dispatch(unsetPaginationAction());\n                }\n\n                if (response && response.item.length > 0) {\n                    const { item, pagination } = response;\n                    dispatch(setMovieListAction(item));\n                    dispatch(setPaginationAction(pagination));\n                }\n            });\n        } catch (e) {\n            dispatch(unsetMovieListAction());\n            dispatch(unsetPaginationAction());\n        }\n    };\n\n    /**\n     * On Change Query\n     * @returns {void}\n     */\n    const onChangeQuery = (text: string): void => {\n        dispatch(unsetMovieListAction());\n        dispatch(unsetPaginationAction());\n        setQuery(text);\n        dispatch(setPageAction(1));\n    };\n\n    const contextValue: MovieListContextInterface = {\n        query,\n        activeMovie,\n        setActiveMovie,\n        onFetchAPI: isFetchAPI,\n        setQuery: onChangeQuery,\n    };\n\n    useEffect(() => {\n        dispatch(setPageAction(1));\n    // eslint-disable-next-line\n    }, []);\n\n    // Query & Page Update\n    useEffect(fetchAPI, [page, query]);\n\n    return (\n        <MovieListContext.Provider value={contextValue}>\n            <MovieListViews\n                item={movieList}\n                totalResult={totalResult}\n            />\n        </MovieListContext.Provider>\n    );\n};\n\nexport default MovieListViewModel;","import { Dispatch } from 'redux';\nimport {\n    SET_MOVIE_LIST_KEY,\n    UNSET_MOVIE_LIST_KEY\n} from '../constant/movie-list.const';\nimport { MovieListItemInterface } from '../../../model/movie/interface/model.interface';\n\n/**\n * Movie List Action\n * @param {MovieListItemInterface[]} response - movie list card item\n * @return {void}\n */\nexport const setMovieListAction = (\n    response: MovieListItemInterface[]\n) => (dispatch: Dispatch): void => {\n    dispatch({\n        type: SET_MOVIE_LIST_KEY,\n        payload: {\n            item: response\n        }\n    });\n};\n\n/**\n * Unset Movie List Action\n * @return {void}\n */\nexport const unsetMovieListAction = () => (\n    dispatch: Dispatch\n): void => {\n    dispatch({\n        type: UNSET_MOVIE_LIST_KEY\n    });\n};\n","import React, { FunctionComponent } from 'react';\nimport MovieListViewModel from './view-model/movie-list.view-model';\n\n/**\n * Movie List Page\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nconst MovieListPage: FunctionComponent = () => {\n    return (\n        <MovieListViewModel />\n    );\n};\n\nexport default MovieListPage;","import React, { FunctionComponent } from 'react';\n\n/**\n * Movie Detail Page\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nconst MovieDetailPage: FunctionComponent = () => {\n    return (\n        <div className=\"heading\">\n            Movie Detail Page\n        </div>\n    );\n};\n\nexport default MovieDetailPage;","import { ReactNode, FunctionComponent } from 'react';\n\nimport PokemonListPage from './movie-list/movie-list.page';\nimport PokemonDetailPage from './movie-detail/movie-detail.page';\nimport { RoutingModulesInterface } from '../../shared/modules/routing/interface/routing-modules.interface';\nimport { RoutingModulesDecorator, RoutingSubModulesDecorator } from '../../shared/modules/routing/decorator/router.decorator';\n\n/**\n * Pokemon Router\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\n@RoutingModulesDecorator('')\nclass PokemonRouter implements RoutingModulesInterface {\n    render(): ReactNode {\n        return null;\n    }\n\n    /**\n     * Movie Detail Path\n     * @return {FunctionComponent}\n     */\n    @RoutingSubModulesDecorator('/detail/:id')\n    public movieDetailPath(): FunctionComponent {\n        return PokemonDetailPage;\n    }\n\n    /**\n     * Movie Search Path\n     * @return {FunctionComponent}\n     */\n    @RoutingSubModulesDecorator('/')\n    public movieListPage(): FunctionComponent {\n        return PokemonListPage;\n    }\n}\n\nexport default PokemonRouter;","import { Reducer } from 'react';\nimport { MovieListItemInterface } from '../../model/movie/interface/model.interface';\nimport { MovieListReducerInterface } from './interfaces/movie-list-reducer.interface';\nimport { ReducerActionParamInterface } from '../../modules/redux/interfaces/redux-action.interface';\nimport {\n    DEFAULT_MOVIE_LIST,\n    SET_MOVIE_LIST_KEY,\n    UNSET_MOVIE_LIST_KEY\n} from './constant/movie-list.const';\n\n/**\n * Movie List Reducers\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst MovieListReducers: Reducer<\n    MovieListReducerInterface,\n    ReducerActionParamInterface\n> = (\n    state: MovieListReducerInterface = {\n        item: DEFAULT_MOVIE_LIST\n    },\n    action\n): MovieListReducerInterface => {\n    switch (action.type) {\n        case SET_MOVIE_LIST_KEY:\n            return {\n                ...state,\n                item: [\n                    ...state.item,\n                    ...((action.payload\n                        .item as unknown) as MovieListItemInterface[])\n                ]\n            };\n        case UNSET_MOVIE_LIST_KEY:\n            return {\n                item: DEFAULT_MOVIE_LIST\n            };\n        default:\n            return state;\n    }\n};\n\nexport default MovieListReducers;\n","import { Reducer } from 'react';\n\nimport { PaginationInterface } from '../../model/general/interface/model.interface';\nimport { PaginationReducerInterface } from './interfaces/pagination-reducer.interface';\nimport { ReducerActionParamInterface } from '../../modules/redux/interfaces/redux-action.interface';\nimport {\n    SET_PAGE_KEY,\n    DEFAULT_PAGINATION,\n    SET_PAGINATION_KEY,\n    UNSET_PAGINATION_KEY\n} from './constant/pagination.const';\n\n/**\n * Pagination Reducers\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst PaginationReducers: Reducer<\n    PaginationReducerInterface,\n    ReducerActionParamInterface\n> = (\n    state: PaginationReducerInterface = DEFAULT_PAGINATION,\n    action: ReducerActionParamInterface\n): PaginationReducerInterface => {\n    switch (action.type) {\n        case SET_PAGE_KEY:\n            return {\n                ...state,\n                pagination: {\n                    ...state.pagination,\n                    ...action.payload\n                }\n            };\n        case SET_PAGINATION_KEY:\n            return {\n                ...state,\n                pagination: (action.payload as unknown) as PaginationInterface\n            };\n        case UNSET_PAGINATION_KEY:\n            return DEFAULT_PAGINATION;\n        default:\n            return state;\n    }\n};\n\nexport default PaginationReducers;\n","import { MovieDetailInterface } from '../../../model/movie/interface/model.interface';\n\nexport const SET_MOVIE_DETAIL_KEY = 'SET_MOVIE_DETAIL';\n\nexport const UNSET_MOVIE_DETAIL_KEY = 'UNSET_MOVIE_DETAIL';\n\nexport const DEFAULT_MOVIE_DETAIL: MovieDetailInterface = {\n    figure: {\n        actors: '',\n        director: '',\n        writter: ''\n    },\n    genre: '',\n    id: '',\n    plot: '',\n    poster: '',\n    production: '',\n    rated: '',\n    ratings: {\n        item: []\n    },\n    released: '',\n    runtime: '',\n    score: {\n        imdbRating: '',\n        imdbVotes: '',\n        metaScore: ''\n    },\n    title: '',\n    type: 'movie',\n    year: ''\n};\n","import { Reducer } from 'react';\nimport { MovieDetailInterface } from '../../model/movie/interface/model.interface';\nimport { MovieDetailReducerInterface } from './interfaces/movie-detail-reducer.interface';\nimport { ReducerActionParamInterface } from '../../modules/redux/interfaces/redux-action.interface';\nimport {\n    DEFAULT_MOVIE_DETAIL,\n    SET_MOVIE_DETAIL_KEY,\n    UNSET_MOVIE_DETAIL_KEY\n} from './constant/movie-detail.const';\n\n/**\n * Movie Detail Reducers\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.18\n */\nconst MovieDetailReducers: Reducer<\n    MovieDetailReducerInterface,\n    ReducerActionParamInterface\n> = (\n    state: MovieDetailReducerInterface = {\n        property: DEFAULT_MOVIE_DETAIL\n    },\n    action: ReducerActionParamInterface\n): MovieDetailReducerInterface => {\n    switch (action.type) {\n        case SET_MOVIE_DETAIL_KEY:\n            return {\n                ...state,\n                property: (action.payload as unknown) as MovieDetailInterface\n            };\n        case UNSET_MOVIE_DETAIL_KEY:\n            return {\n                property: DEFAULT_MOVIE_DETAIL\n            };\n        default:\n            return state;\n    }\n};\n\nexport default MovieDetailReducers;\n","import { combineReducers } from 'redux';\n\nimport { Reducer } from 'react';\nimport MovieListReducers from './movie-list';\nimport PaginationReducers from './pagination';\nimport MovieDetailReducers from './movie-detail';\nimport { MovieDetailReducerInterface } from './movie-detail/interfaces/movie-detail-reducer.interface';\nimport { PaginationReducerInterface } from './pagination/interfaces/pagination-reducer.interface';\nimport { ReducerActionParamInterface } from '../modules/redux/interfaces/redux-action.interface';\nimport { MovieListReducerInterface } from './movie-list/interfaces/movie-list-reducer.interface';\n\nexport const Reducers = combineReducers({\n    list: MovieListReducers,\n    detail: MovieDetailReducers,\n    pagination: PaginationReducers\n});\n\nexport type TypeReducers = {\n    list: Reducer<\n        MovieListReducerInterface,\n        ReducerActionParamInterface\n    >;\n    detail: Reducer<\n        MovieDetailReducerInterface,\n        ReducerActionParamInterface\n    >;\n    pagination: Reducer<\n        PaginationReducerInterface,\n        ReducerActionParamInterface\n    >;\n};\n\nexport type TypeValueReducers = {\n    list: MovieListReducerInterface;\n    detail: MovieDetailReducerInterface;\n    pagination: PaginationReducerInterface;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Reducer } from 'react';\nimport thunk from 'redux-thunk';\nimport {\n    Store,\n    compose,\n    createStore,\n    applyMiddleware\n} from 'redux';\n\nimport { Reducers } from '../../../reducers';\nimport {\n    StoreInterface,\n    ReducerActionParamInterface\n} from '../interfaces/redux-action.interface';\n\n/**\n * Configure Store Helper\n * @author Irfan Andriansyah <irfan@99.co>\n * @description singleton class for helped generate store and setup redux\n * @since 2020.09.18\n */\nclass StoreBuilder {\n    private reducers:\n        | Reducer<any, ReducerActionParamInterface>\n        | undefined;\n\n    /**\n     * Getter composeEnhancers Method\n     * @description Getter compose enhancers\n     * @return {any}\n     */\n    private get composeEnhancers(): any {\n        return (\n            (window as any)\n                .__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||\n            compose\n        );\n    }\n\n    /**\n     * setReducers Method\n     * @param {any} reducers - reducers from return method combineReducers\n     * @description setter reducers\n     * @return {this}\n     */\n    public setReducers(\n        reducers: Reducer<any, ReducerActionParamInterface>\n    ): this {\n        this.reducers = reducers;\n        return this;\n    }\n\n    /**\n     * generateStore Method\n     * @description generate store redux config\n     * @return {ConfigureStoreResponseInterface}\n     */\n    public generateStore(): StoreInterface {\n        const { reducers, composeEnhancers } = this;\n\n        if (reducers) {\n            const store: Store<\n                any,\n                ReducerActionParamInterface\n            > = createStore(\n                reducers,\n                {},\n                composeEnhancers(applyMiddleware(thunk))\n            );\n\n            return store;\n        }\n\n        throw new Error('Reducers Undefined !');\n    }\n\n    /**\n     * Singleton Builder\n     * @description\n     */\n    public static singleton(): StoreInterface {\n        return new StoreBuilder()\n            .setReducers(Reducers)\n            .generateStore();\n    }\n}\n\nexport default StoreBuilder;\n","import MovieRouter from './content/movie/movie.router';\nimport RoutingAppAbstract from './shared/modules/routing/abstract/routing-app.abstract';\n\n/**\n * Apps Instance\n * @returns {ReactElement}\n */\nclass App extends RoutingAppAbstract {\n    /**\n     * Modules\n     * @return {Object[]}\n     */\n    get modules(): Object[] {\n        return [\n            MovieRouter\n        ];\n    }\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Provider } from 'react-redux';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport StoreBuilder from '../../redux/builder/store.builder';\nimport { StoreInterface } from '../../redux/interfaces/redux-action.interface';\n\nimport { RoutingItemInterface } from '../interface/routing-item.interface';\n\n/**\n * Routing App\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2020.09.17\n */\nabstract class RoutingAppAbstract extends PureComponent {\n    /**\n     * Generate Routing\n     * @param {Object[]} modules - modules react\n     * @return {ReactNode}\n     */\n    public static generateRouting(\n        modules: Object[]\n    ): ReactNode {\n        return (\n            <Switch>\n                {modules.map((ModulesItem: any) => {\n                    const controllerPath: string = Reflect.getMetadata('modules', ModulesItem);\n                    const routes: RoutingItemInterface[] = Reflect\n                        .getMetadata(\n                            'submodules',\n                            ModulesItem\n                        ) || [];\n                    const Modules = new ModulesItem();\n\n                    return (\n                        <Route path={controllerPath} key={controllerPath}>\n                            {Modules.render()}         \n                            {RoutingAppAbstract.generateRoutingItem(\n                                Modules,\n                                routes,\n                                controllerPath\n                            )}\n                            \n                        </Route>\n                    );\n                })}\n            </Switch>\n        );\n    }\n\n    /**\n     * Generate Routing Item\n     * @param {Object} modules - object class\n     * @param {RoutingItemInterface[]} routes - routes list\n     * @param {string} modulesPath - path uri\n     * @return {ReactNode}\n     */\n    public static generateRoutingItem(\n        modules: Object,\n        routes: RoutingItemInterface[],\n        modulesPath: string\n    ): ReactNode {\n        return (\n            <Switch>\n                {routes.map(({ methodName, ...res }) => {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const Component: any = (modules as any)[methodName]();\n                    \n                    return (\n                        <Route exact path={`${modulesPath}${res.path}`} key={res.path}>\n                            <Component />\n                        </Route>\n                    );\n                })}\n            </Switch>\n        );\n    }\n\n    private store: StoreInterface | undefined = undefined;\n\n    constructor(props: {}) {\n        super(props);\n\n        this.store = StoreBuilder.singleton();\n    }\n\n    abstract get modules(): Object[];\n\n    /**\n     * Render\n     */\n    render(): ReactNode {\n        const { store } = this;\n\n        if (store) {\n            return (\n                <Provider store={store}>\n                    <HashRouter>\n                        {RoutingAppAbstract.generateRouting(this.modules)}\n                    </HashRouter>\n                </Provider>\n            );\n        }\n\n        return (\n            <HashRouter>\n                {RoutingAppAbstract.generateRouting(this.modules)}\n            </HashRouter>\n        );\n    }\n}\n\nexport default RoutingAppAbstract;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './shared/style/style.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}